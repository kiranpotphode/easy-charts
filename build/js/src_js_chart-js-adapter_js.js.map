{"version":3,"file":"js/src_js_chart-js-adapter_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAmC;AACqB;AACQ;;AAEuC;AAC1C;AACG;AACN;AACuB;AACK;AACA;AAC5C;;AAE1C;;AAEA;;AAEA;AACA;AACA,gBAAgB,yEAAc;;AAE9B,sBAAsB,0EAAmB;;AAEzC;AACA,kBAAkB,sEAAW;;AAE7B;AACA;AACA,SAAS,oEAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,oCAAoC,iCAAiC;AACrE,kCAAkC,oBAAoB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,2CAA2C;AAC3C,MAAM;AACN,KAAK;AACL;AACA,IAAI;AACJ;AACA,oCAAoC,iCAAiC;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA,KAAK;AACL;AACA,IAAI;AACJ,GAAG;;AAEH;AACA;AACA,WAAW,oEAAS;AACpB,IAAI;;AAEJ;AACA,WAAW,oEAAS;AACpB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,UAAU,2DAAQ;AAClB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;;AAGA,SAAS;AACT;;AAEe;AACf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,CAAC,qDAAK,WAAW,4EAAS;AAC1B,CAAC,qDAAK,WAAW,0EAAQ;AACzB,CAAC,qDAAK,WAAW,6EAAW;;AAE5B;AACA,CAAC,qDAAK,WAAW,kFAAsB;AACvC,CAAC,qDAAK,WAAW,qFAAwB;;AAEzC,CAAC,qDAAK,WAAW,qFAAwB;;AAEzC;AACA;;AAEA;AACA,CAAC,qDAAK,WAAW,iEAAe;AAChC,CAAC,qDAAK,WAAW,kEAAuB;;;AAGxC;AACA,CAAC,8DAAc,8BAA8B,mBAAmB;AAChE,CAAC,8DAAc;AACf,CAAC,8DAAc;AACf,CAAC,8DAAc;;;AAGf,CAAC,8DAAc;;;;AAIf,eAAe,qDAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,GAAG;;AAEH;AACA,C;;;;;;;;;;;;;;;;;AC7VO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,QAAQ;AAC1C;;AAEO;;AAEP;AACA;AACA;AACA,WAAW;AACX;;AAEO;AACP;;AAEA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,iCAAiC,eAAe;AAChD,oDAAoD,mCAAmC;;AAEvF,iCAAiC,+BAA+B;;AAEhE;AACA,GAAG;AACH;AACA;;AAEA,C;;;;;;;;;;;;;;AC1GA;AACA;AACA;AACA,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,sBAAsB,E;;;;;;;;;;;;;;ACZrC;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU,cAAc;AACxB;AACA;AACA;;AAEA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAiB,wBAAwB,E;;;;;;;;;;;;;;AC3CzC;AACA;AACA;AACA,SAAS,KAAK;AACd,qCAAqC;AACrC;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;;AAEA;AACA;AACA;;AAEA,iEAAe,wBAAwB,E;;;;;;;;;;;;;;;AChBI;;AAE3C,uBAAuB,gDAAK;AAC5B;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA,cAAc,gDAAK;AACnB;AACA;;AAEA;AACA,UAAU,WAAW;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,UAAU;AACjC,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,QAAQ,E;;;;;;;;;;;;;;;ACxDqB;;AAE5C,wBAAwB,gDAAK;AAC7B;AACA;;AAEA;AACA;AACA,SAAS,gDAAK;AACd;;AAEA;AACA,UAAU,WAAW;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB,UAAU;AAC/B,iBAAiB,eAAe;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,E;;;;;;;;;;;;;;;AC/CY;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,gDAAK;AAC/B;AACA;AACA;AACA;;AAEA;AACA,UAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,UAAU;AAC/B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;;AAEA,iEAAe,WAAW,E","sources":["webpack://easy-charts/./src/js/chart-js-adapter.js","webpack://easy-charts/./src/js/chart-js-adapter/helpers.js","webpack://easy-charts/./src/js/chart-js-adapter/plugin-canvas-background.js","webpack://easy-charts/./src/js/chart-js-adapter/plugin-download-chart-image.js","webpack://easy-charts/./src/js/chart-js-adapter/plugin-plot-area-background.js","webpack://easy-charts/./src/js/chart-js-adapter/plugin-pow-scale.js","webpack://easy-charts/./src/js/chart-js-adapter/plugin-squrt-scale.js","webpack://easy-charts/./src/js/chart-js-adapter/plugin-symlog-scale.js"],"sourcesContent":["import Chart  from 'chart.js/auto';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport ChartjsPluginStacked100 from \"chartjs-plugin-stacked100\";\n\nimport {chartJSColorPalette, hexToRgba, getChartLabels, getDataSets } from './chart-js-adapter/helpers'\nimport SqrtScale from './chart-js-adapter/plugin-squrt-scale'\nimport SymlogScale from './chart-js-adapter/plugin-symlog-scale'\nimport PowScale from './chart-js-adapter/plugin-pow-scale'\nimport canvasBackgroundPlugin from \"./chart-js-adapter/plugin-canvas-background\";\nimport plotAreaBackgroundPlugin from \"./chart-js-adapter/plugin-plot-area-background\";\nimport downloadChartImagePlugin from \"./chart-js-adapter/plugin-download-chart-image\";\nimport {isNumber} from \"chart.js/helpers\";\n\nlet chartJS;\n\nfunction parseChartJSData ( rawData, rawConfig, extraConfig ) {\n\n\tconsole.log(rawConfig);\n\t// Extract all unique labels dynamically.\n\tconst labels = getChartLabels( rawData );\n\n\tconst colorPalette = chartJSColorPalette[rawConfig.graph.palette];\n\n\t// Generate datasets dynamically.\n\tconst datasets = getDataSets( rawData, labels, colorPalette, extraConfig );\n\n\tconst scaleGrid = {\n\t\ttickColor: rawConfig.axis.strokecolor,\n\t\tcolor: hexToRgba( rawConfig.axis.strokecolor, rawConfig.axis.opacity )\n\t}\n\tconst scaleTicksStyles = {\n\t\tmaxTicksLimit: rawConfig.axis.ticks, // Limits the number of x-axis ticks.\n\t\tpadding: rawConfig.axis.padding,\n\t\tdisplay: rawConfig.axis.showtext,\n\t\tcolor: rawConfig.label.strokecolor,\n\t\tfont: {\n\t\t\tsize: rawConfig.label.fontsize,\n\t\t\tfamily: rawConfig.label.fontfamily,\n\t\t\tweight: rawConfig.label.fontweight,\n\t\t},\n\t};\n\tconst scaleTitleFontStyles = {\n\t\tfont: {\n\t\t\tsize: rawConfig.axis.fontsize,\n\t\t\tfamily: rawConfig.axis.fontfamily,\n\t\t\tweight: rawConfig.axis.fontweight,\n\t\t},\n\t};\n\n\tconst options = {\n\t\tresponsive: true === rawConfig.graph.responsive,\n\t\t//maintainAspectRatio: true === rawConfig.graph.responsive,\n\t\tresizeDelay: 1000,\n\t\tindexAxis: 'Horizontal' === rawConfig.graph.orientation ? 'y' : 'x',\n\t\tcategoryPercentage: 1 - parseFloat( rawConfig.scale.ordinality ),\n\t\tlayout: {\n\t\t\tpadding: {\n\t\t\t\ttop: rawConfig.margin.top,\n\t\t\t\tright: rawConfig.margin.right,\n\t\t\t\tbottom: rawConfig.margin.bottom,\n\t\t\t\tleft: rawConfig.margin.left\n\t\t\t}\n\t\t},\n\t\tscales: {\n\t\t\ty: {\n\t\t\t\tbeginAtZero: true,\n\t\t\t\t//type: 'category',\n\t\t\t\t//type:  'log' == rawConfig.scale.type ? 'logarithmic' : rawConfig.scale.type,\n\t\t\t\t...( extraConfig.isStacked && { stacked: extraConfig.isStacked } ),\n\t\t\t\t...( extraConfig.stepped && { beginAtZero: true } ), // For stepped up bar chart.\n\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: !!rawConfig.meta.vlabel.length,\n\t\t\t\t\ttext: [rawConfig.meta.vlabel,rawConfig.meta.vsublabel], // Vertical caption.\n\t\t\t\t\tfont: {\n\t\t\t\t\t\tsize: rawConfig.axis.fontsize,\n\t\t\t\t\t\tfamily: rawConfig.axis.fontfamily,\n\t\t\t\t\t\tweight: rawConfig.axis.fontweight,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tticks: {\n\t\t\t\t\t//stepSize: 10,\n\t\t\t\t\tautoSkip: false,\n\t\t\t\t\tmaxTicksLimit: rawConfig.axis.ticks,\n\t\t\t\t\tmajor: {\n\t\t\t\t\t\tenabled: true\n\t\t\t\t\t},\n\t\t\t\t\t...scaleTicksStyles,\n\t\t\t\t\t//stepSize: 30, // Adjusts tick intervals instead of major/minor\n\t\t\t\t\t/*callback: function(value, index, values) {\n\t\t\t\t\t\treturn index % 2 === 0 ? value : ''; // Show every alternate tick\n\t\t\t\t\t}*/\n\t\t\t\t},\n\t\t\t\tgrid: scaleGrid\n\t\t\t},\n\t\t\tx: {\n\t\t\t\t...( extraConfig.isStacked && { stacked: extraConfig.isStacked } ),\n\t\t\t\tbeginAtZero: true,\n\t\t\t\t//offset: true,\n\t\t\t\t//stacked: true,\n\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: !!rawConfig.meta.hlabel.length,\n\t\t\t\t\ttext: [rawConfig.meta.hlabel,rawConfig.meta.hsublabel], // Horizontal caption.\n\t\t\t\t\tfont: {\n\t\t\t\t\t\tsize: rawConfig.axis.fontsize,\n\t\t\t\t\t\tfamily: rawConfig.axis.fontfamily,\n\t\t\t\t\t\tweight: rawConfig.axis.fontweight,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tticks: {\n\t\t\t\t\t//stepSize: 10,\n\t\t\t\t\tautoSkip: false,\n\t\t\t\t\tmaxTicksLimit: rawConfig.axis.ticks,\n\t\t\t\t\tmajor: {\n\t\t\t\t\t\tenabled: true\n\t\t\t\t\t},\n\t\t\t\t\tminor: {\n\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\tsize: 10,\n\t\t\t\t\t\t\tcolor: '#888'\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t...scaleTicksStyles,\n\t\t\t\t},\n\t\t\t\tgrid: scaleGrid\n\t\t\t},\n\t\t},\n\n\t\tplugins: {\n\t\t\tcustomCanvasBackgroundColor: {\n\t\t\t\tcolor: hexToRgba( rawConfig.frame.bgcolor, rawConfig.graph.opacity )\n\t\t\t},\n\n\t\t\tcustomPlotAreaBackgroundColor: {\n\t\t\t\tcolor: hexToRgba( rawConfig.graph.bgcolor,rawConfig.graph.opacity )\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\tdisplay: !!rawConfig.meta.caption.length,\n\t\t\t\ttext: rawConfig.meta.caption,\n\t\t\t\tfont: {\n\t\t\t\t\tfamily: rawConfig.caption.fontfamily,\n\t\t\t\t\tsize: rawConfig.caption.fontsize,\n\t\t\t\t\tweight: rawConfig.caption.weight,\n\t\t\t\t\tstyle: rawConfig.caption.style\n\t\t\t\t},\n\t\t\t\tcolor: rawConfig.caption.strokecolor\n\t\t\t},\n\t\t\tsubtitle: {\n\t\t\t\tdisplay: !!rawConfig.meta.subcaption.length,\n\t\t\t\ttext: rawConfig.meta.subcaption,\n\t\t\t\tfont: {\n\t\t\t\t\tfamily: rawConfig.subCaption.fontfamily,\n\t\t\t\t\tsize: rawConfig.subCaption.fontsize,\n\t\t\t\t\tweight: rawConfig.subCaption.weight,\n\t\t\t\t},\n\t\t\t\tcolor: rawConfig.subCaption.strokecolor\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tenabled: 1 === rawConfig.tooltip.show,\n\t\t\t\tcallbacks: {\n\t\t\t\t\tlabel: ( context ) => {\n\t\t\t\t\t\tif ( ! rawConfig.label.precision ) {\n\t\t\t\t\t\t\treturn  undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst formattedNumber = context.raw % 1 === 0 ? context.raw : Number( context.raw ).toFixed( rawConfig.label.precision );\n\t\t\t\t\t\treturn context.dataset.label + ' : ' + formattedNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdatalabels: {\n\t\t\t\tdisplay: 1 === rawConfig.label.showlabel,\n\t\t\t\tanchor: 'end',\n\t\t\t\talign: 'end',\n\t\t\t\tcolor: rawConfig.label.strokecolor,\n\t\t\t\tfont: {\n\t\t\t\t\tfamily: rawConfig.label.fontfamily,\n\t\t\t\t\tsize: rawConfig.label.fontsize,\n\t\t\t\t},\n\t\t\t\tformatter: function ( value, context ) {\n\t\t\t\t\tif ( isNumber( value ) && rawConfig.label.precision && value % 1 !== 0 ) {\n\t\t\t\t\t\tvalue = value.toFixed( rawConfig.label.precision );\n\t\t\t\t\t}\n\t\t\t\t\treturn rawConfig.label.prefix + value + rawConfig.label.suffix;\n\t\t\t\t}\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tdisplay: 1 === rawConfig.legend.showlegends,\n\t\t\t\tposition: rawConfig.legend.position,\n\t\t\t\tlabels: {\n\t\t\t\t\tboxWidth: rawConfig.legend.symbolsize,\n\t\t\t\t\tfont: {\n\t\t\t\t\t\tfamily: rawConfig.legend.fontfamily,\n\t\t\t\t\t\tsize: rawConfig.legend.fontsize,\n\t\t\t\t\t\tweight: rawConfig.legend.fontweight,\n\t\t\t\t\t},\n\t\t\t\t\tcolor: rawConfig.legend.color // label text color.\n\t\t\t\t}\n\t\t\t},\n\t\t\tstacked100: {\n\t\t\t\tenable: 'PercentBar' === extraConfig.chartType || 'PercentArea' === extraConfig.chartType\n\t\t\t},\n\n\t\t\tdownloadChartImagePlugin: {\n\t\t\t\tenable: 1 === rawConfig.meta.isDownloadable,\n\t\t\t\tbuttonText: rawConfig.meta.downloadLabel,\n\t\t\t\tbuttonColor: '#3932FE',\n\t\t\t\tfontSize: 14,\n\t\t\t\tfilename: 'my_chart.png'\n\t\t\t},\n\t\t}\n\t}\n\n\n\treturn {labels: labels, datasets: datasets, options: options};\n};\n\nexport default function chartJs( chartSelector, ec_chart_data ) {\n\tlet chartType = ec_chart_data.chart_type;\n\tlet extraConfig = {};\n\tlet chartDataset = ec_chart_data.chart_data;\n\tlet chartConfiguration = ec_chart_data.chart_configuration;\n\n\textraConfig['opacity'] = chartConfiguration.graph.opacity ? parseFloat( chartConfiguration.graph.opacity ) : 1;\n\n\tswitch ( ec_chart_data.chart_type ) {\n\tcase 'Bar':\n\t\tchartType = 'bar';\n\t\tbreak;\n\tcase 'Waterfall':\n\t\tchartType = 'bar';\n\t\textraConfig['chartType'] = 'Waterfall';\n\t\textraConfig['isStacked'] = true;\n\t\tbreak;\n\tcase 'Pie':\n\t\tchartType = 'pie';\n\t\textraConfig['chartType'] = 'Pie';\n\t\tbreak;\n\tcase 'Donut':\n\t\tchartType = 'doughnut';\n\t\textraConfig['chartType'] = 'Pie'; // dataset is currently kept same as pie chart.\n\t\tbreak;\n\tcase 'StepUpBar':\n\t\tchartType = 'bar';\n\t\textraConfig['chartType'] = 'StepUpBar';\n\t\textraConfig['isStacked'] = true;\n\t\tbreak;\n\tcase 'StackedBar':\n\t\tchartType = 'bar';\n\t\textraConfig['isStacked'] = true;\n\t\tbreak;\n\tcase 'PercentBar':\n\t\tchartType = 'bar';\n\t\textraConfig['chartType'] = 'PercentBar';\n\t\tbreak;\n\tcase 'Area':\n\t\tchartType = 'line';\n\t\textraConfig['chartType'] = 'Area';\n\t\textraConfig['fill'] = true;\n\t\textraConfig['tension'] = 0.4;\n\t\tbreak;\n\tcase 'PolarArea':\n\t\tchartType = 'polarArea';\n\t\textraConfig['chartType'] = 'PolarArea';\n\t\textraConfig['fill'] = true;\n\t\textraConfig['tension'] = 0.4;\n\t\tbreak;\n\tcase 'PercentArea':\n\t\tchartType = 'line';\n\t\textraConfig['chartType'] = 'PercentArea';\n\t\textraConfig['fill'] = true;\n\t\textraConfig['isStacked'] = true;\n\t\tbreak;\n\tcase 'Line':\n\t\tchartType = 'line';\n\t\textraConfig['chartType'] = 'Line';\n\t\t//extraConfig['tension'] = 0.4;\n\t\tbreak;\n\tcase 'StackedArea':\n\t\tchartType = 'line';\n\t\textraConfig['chartType'] = 'StackedArea';\n\t\textraConfig['fill'] = true;\n\t\textraConfig['isStacked'] = true;\n\t\textraConfig['tension'] = 0.4;\n\t\tbreak;\n\t}\n\n\tlet chartJSData = parseChartJSData( chartDataset, chartConfiguration, extraConfig );\n\n\t// Register the custom scales plugins.\n\tChart.register( SqrtScale );\n\tChart.register( PowScale );\n\tChart.register( SymlogScale );\n\n\t// Register custom background color plugins.\n\tChart.register( canvasBackgroundPlugin );\n\tChart.register( plotAreaBackgroundPlugin );\n\n\tChart.register( downloadChartImagePlugin );\n\n\t// Register custom chart plugins.\n\t//Chart.register(stepUpBar);\n\n\t// Register ChartDataLabels plugin.\n\tChart.register( ChartDataLabels );\n\tChart.register( ChartjsPluginStacked100 );\n\n\n\t// Change default options for ALL charts.\n\tChart.defaults.set( 'plugins.datalabels', { anchor: 'center' } );\n\tChart.defaults.elements.bar.borderWidth = 2;\n\tChart.defaults.elements.point.radius = 5;\n\tChart.defaults.elements.point.hoverRadius = 8;\n\n\n\tChart.defaults.elements.line.cubicInterpolationMode = 'monotone';\n\n\n\n\tchartJS = new Chart(\n\t\tdocument.querySelector( chartSelector ),\n\t\t{\n\t\t\ttype: chartType,\n\t\t\tdata: {\n\t\t\t\tlabels: chartJSData.labels,\n\t\t\t\tdatasets: chartJSData.datasets\n\t\t\t},\n\t\t\toptions: chartJSData.options,\n\t\t\tplugins: chartJSData.plugins\n\t\t}\n\t);\n\n\n\tif ( true != ec_chart_data.chart_configuration.graph.responsive ) {\n\n\n\t\tchartJS.resize( ec_chart_data.chart_configuration.dimension.width,ec_chart_data.chart_configuration.dimension.height );\n\t}\n\n\t// Responsive resize handler (debounced).\n\tlet resizeTimeout;\n\twindow.addEventListener( 'resize', () => {\n\t\tclearTimeout( resizeTimeout );\n\t\tresizeTimeout = setTimeout( () => {\n\t\t\tchartJS.resize();\n\t\t}, 2500 );\n\t} );\n\n\treturn chartJS;\n}","export const chartJSColorPalette = {\n\t'Default': ['#00BBC9', '#EC63AB', '#AA8AE4', '#83CE44', '#ff8f25', '#009EAA', '#CA4F7F', '#9C70C0', '#6BAF3B'],\n\t'OldDefault' : ['#7E6DA1', '#C2CF30', '#FF8900', '#FE2600', '#E3003F', '#8E1E5F', '#FE2AC2', '#CCF030', '#9900EC', '#3A1AA8', '#3932FE', '#3276FF', '#35B9F6', '#42BC6A', '#91E0CB'],\n\t'Plain' : ['#B1EB68', '#B1B9B5', '#FFA16C', '#9B64E7', '#CEE113', '#2F9CFA', '#CA6877', '#EC3D8C', '#9CC66D', '#C73640', '#7D9532', '#B064DC' ],\n\t'Android' : ['#33B5E5', '#AA66CC', '#99CC00', '#FFBB33', '#FF4444', '#0099CC', '#9933CC', '#669900', '#FF8800', '#CC0000'],\n\t'Soft' : [ '#9ED8D2', '#FFD478', '#F16D9A', '#A8D59D', '#FDC180', '#F05133', '#EDED8A', '#F6A0A5', '#9F218B' ],\n\t'Simple' : [ '#FF8181', '#FFB081', '#FFE081', '#EFFF81', '#BFFF81', '#90FF81', '#81FFA2', '#81FFD1', '#9681FF', '#C281FF', '#FF81DD' ],\n\t'Egypt' : [ '#3A3E04','#784818','#FCFCA8','#C03C0C','#F0A830','#A8783C','#FCFCFC','#FCE460','#540C00','#C0C084','#3C303C','#1EA34A','#606C54','#F06048' ],\n\t'Olive' : [ '#18240C','#3C6C18','#60A824','#90D824','#A8CC60','#789C60','#CCF030','#B4CCA8','#D8F078','#40190D','#E4F0CC' ],\n\t'Candid' : [ '#AF5E14','#81400C','#E5785D','#FEBFBF','#A66363','#C7B752','#EFF1A7','#83ADB7','#528F98','#BCEDF5','#446B3D','#8BD96F','#E4FFB9' ],\n\t'Sulphide' : [ '#594440','#0392A7','#FFC343','#E2492F','#007257','#B0BC4A','#2E5493','#7C2738','#FF538B','#A593A1','#EBBA86','#E2D9CA' ],\n\t'Lint' : ['#A8A878','#F0D89C','#60909C','#242418','#E49C30','#54483C','#306090','#C06C00','#C0C0C0','#847854','#6C3C00','#9C3C3C','#183C60','#FCCC00','#840000','#FCFCFC']\n};\n\nexport function hexToRgba( hex = '#ffffff', opacity = 1 ) {\n\t// Remove the '#' if it exists\n\thex = hex.replace( /^#/, \"\" );\n\n\t// Parse r, g, b values\n\tlet r, g, b;\n\n\tif ( hex.length === 3 ) {\n\t\t// If shorthand hex (#abc), expand to full (#aabbcc)\n\t\tr = parseInt( hex[0] + hex[0], 16 );\n\t\tg = parseInt( hex[1] + hex[1], 16 );\n\t\tb = parseInt( hex[2] + hex[2], 16 );\n\t} else if ( hex.length === 6 ) {\n\t\t// If full hex (#aabbcc)\n\t\tr = parseInt( hex.substring( 0, 2 ), 16 );\n\t\tg = parseInt( hex.substring( 2, 4 ), 16 );\n\t\tb = parseInt( hex.substring( 4, 6 ), 16 );\n\t} else {\n\t\tthrow new Error( \"Invalid HEX color.\" );\n\t}\n\n\t// Ensure opacity is between 0 and 1\n\topacity = Math.min( 1, Math.max( 0, opacity ) );\n\n\treturn `rgba(${r}, ${g}, ${b}, ${opacity})`;\n}\n\nexport function getChartLabels( rawData ) {\n\n\t// Extract all unique labels dynamically.\n\treturn Array.from(\n\t\tnew Set( Object.values( rawData ).flat().map( ( entry ) => entry.name ) )\n\t).sort(); // Sorting for consistency.\n}\n\nexport function getDataSets( rawData, labels, colorPalette, extraConfig ) {\n\tconst legends = Object.keys( rawData );\n\n\treturn legends.map( ( legend, index ) => {\n\n\t\tif (  ( extraConfig.chartType === 'Waterfall'|| extraConfig.chartType === 'Pie'|| extraConfig.chartType === 'PolarArea' ) && legend !== legends[0] ) {\n\t\t\treturn null; // Skip non-first legends\n\t\t}\n\n\t\tlet data = labels.map(\n\t\t\t( xAxis ) =>\n\t\t\t\trawData[legend].find( ( entry ) => entry.name === xAxis )?.value || 0\n\t\t);\n\n\t\tlet cumulative = 0;\n\n\t\tconst ranges = data.map( v => {\n\t\t\tconst start = cumulative;\n\t\t\tcumulative += v;\n\t\t\treturn [start, cumulative];\n\t\t} );\n\n\t\tfunction toRanges(dataArr) {\n\t\t\tconst ranges = [];\n\t\t\tlet cumulative = 0;\n\t\t\tdataArr.forEach(value => {\n\t\t\t\tconst start = cumulative;\n\t\t\t\tcumulative += value;\n\t\t\t\tranges.push([start, cumulative]);\n\t\t\t});\n\t\t\treturn ranges;\n\t\t}\n\n\t\treturn {\n\t\t\tlabel: legend,\n\t\t\tdata: extraConfig.chartType === 'Waterfall'  ? ranges : data,\n\t\t\tbackgroundColor :  extraConfig.chartType === 'Pie' || extraConfig.chartType === 'PolarArea' ? colorPalette:  hexToRgba( colorPalette[index % colorPalette.length], extraConfig['opacity'] ),\n\t\t\tborderColor : extraConfig.chartType === 'Pie' || extraConfig.chartType === 'PolarArea' ? colorPalette:  colorPalette[index % colorPalette.length],\n\t\t\tfill: extraConfig.fill === true,\n\t\t\t// Apply semi-transparent fill if using an Area chart.\n\t\t\t...(\n\t\t\t\textraConfig.chartType === 'Area'\n\t\t\t\t\t? { backgroundColor : hexToRgba( colorPalette[index % colorPalette.length], 0.5 ) }\n\t\t\t\t\t: {}\n\t\t\t),\n\n\t\t\t// Apply tension if requested.\n\t\t\t...( extraConfig.tension && { tension: 0.4 } ),\n\t\t\t//...(extraConfig.chartType === 'StepUpBar' && { barPercentage: 1/legends.length }  ),\n\n\t\t\t...( extraConfig.stepped && { stepped: extraConfig.stepped } ), // For setp up bar chart.\n\n\t\t};\n\t} )\n\t\t// Remove any null entries so Chart.js only receives valid datasets.\n\t\t.filter( ( dataset ) => dataset !== null );\n\n}","const canvasBackgroundPlugin         = {\n\tid: 'customCanvasBackgroundColor',\n\tbeforeDraw: ( chart, args, options ) => {\n\t\tconst {ctx}                  = chart;\n\t\tctx.save();\n\t\tctx.globalCompositeOperation = 'destination-over';\n\t\tctx.fillStyle                = options.color ? options.color : '#ffffff';\n\t\tctx.fillRect( 0, 0, chart.width, chart.height );\n\t\tctx.restore();\n\t}\n};\n\nexport default canvasBackgroundPlugin;","const downloadChartImagePlugin = {\n\tid: 'downloadChartImagePlugin',\n\tafterDraw(chart, _args, options) {\n\t\tif ( ! options.enable ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { ctx, canvas } = chart;\n\t\tconst text = options.buttonText || 'Download Chart';\n\t\tconst padding = 10;\n\t\tconst fontSize = options.fontSize || 12;\n\n\t\tctx.save();\n\t\tctx.font = `${fontSize}px sans-serif`;\n\t\tctx.fillStyle = options.buttonColor || '#007bff';\n\t\tconst textWidth = ctx.measureText(text).width;\n\t\tconst x = canvas.width - textWidth - padding;\n\t\tconst y = canvas.height - padding;\n\n\t\tctx.fillText(text, x, y);\n\t\tctx.restore();\n\n\t\t// Canvas click listener\n\t\tcanvas.onclick = (e) => {\n\t\t\tconst rect = canvas.getBoundingClientRect();\n\t\t\tconst clickX = e.clientX - rect.left;\n\t\t\tconst clickY = e.clientY - rect.top;\n\t\t\tif (\n\t\t\t\tclickX >= x &&\n\t\t\t\tclickX <= x + textWidth &&\n\t\t\t\tclickY >= y - fontSize &&\n\t\t\t\tclickY <= y\n\t\t\t) {\n\t\t\t\tconst url = chart.toBase64Image();\n\t\t\t\tconst link = document.createElement('a');\n\t\t\t\tlink.href = url;\n\t\t\t\tlink.download = options.filename || 'chart.png';\n\t\t\t\tlink.click();\n\t\t\t}\n\t\t};\n\t}\n};\n\nexport  default  downloadChartImagePlugin;","const plotAreaBackgroundPlugin = {\n\tid: 'customPlotAreaBackgroundColor',\n\tbeforeDraw: ( chart, args, options ) => {\n\t\tconst {ctx} = chart;\n\t\tconst chartArea = chart.chartArea; // Get the axis area\n\t\tctx.save();\n\t\t//ctx.globalCompositeOperation = 'destination-over';\n\t\t//ctx.fillStyle = options.color ? hexToRgba( options.color, options.opacity ) : '#ffffff';\n\t\t//ctx.fillRect(0, 0, chart.width, chart.height);\n\t\tctx.fillStyle = options.color ? options.color : '#ffffff'; // Background color.\n\t\tctx.fillRect( chartArea.left, chartArea.top, chartArea.right - chartArea.left, chartArea.bottom - chartArea.top );\n\n\t\tctx.restore();\n\t}\n};\n\nexport default plotAreaBackgroundPlugin;","import {Chart, Scale} from \"chart.js/auto\";\n\nclass PowScale extends Scale {\n\tstatic id = 'pow';\n\n\tconstructor( cfg ) {\n\t\tsuper( cfg );\n\t\tthis._startValue = undefined;\n\t\tthis._valueRange = 0;\n\t\tthis.power = cfg.power || 2; // default exponent.\n\t}\n\n\tparse( raw, index ) {\n\t\tconst val = Chart.LinearScale.prototype.parse.call( this, raw, index );\n\t\treturn isFinite( val ) ? val : null;\n\t}\n\n\tdetermineDataLimits() {\n\t\tconst { min, max } = this.getMinMax( true );\n\t\tthis.min = isFinite( min ) ? min : 0;\n\t\tthis.max = isFinite( max ) ? max : 0;\n\t}\n\n\tbuildTicks() {\n\t\tconst ticks = [];\n\t\tconst start = Math.pow( this.min, 1 / this.power );\n\t\tconst end = Math.pow( this.max, 1 / this.power );\n\t\tconst step = ( end - start ) / 5;\n\n\t\tfor ( let r = start; r <= end; r += step ) {\n\t\t\tticks.push( { value: r ** this.power } );\n\t\t}\n\t\tthis.min = ticks[0]?.value ?? this.min;\n\t\tthis.max = ticks[ticks.length - 1]?.value ?? this.max;\n\t\treturn ticks;\n\t}\n\n\tconfigure() {\n\t\tsuper.configure();\n\t\tthis._startValue = Math.pow( this.min, 1 / this.power );\n\t\tthis._valueRange = Math.pow( this.max, 1 / this.power ) - this._startValue;\n\t}\n\n\tgetPixelForValue( value ) {\n\t\tconst transformed = Math.pow( value, 1 / this.power );\n\t\tconst ratio = ( transformed - this._startValue ) / this._valueRange;\n\t\treturn this.getPixelForDecimal( ratio );\n\t}\n\n\tgetValueForPixel( pixel ) {\n\t\tconst ratio = this.getDecimalForPixel( pixel );\n\t\tconst val = this._startValue + ratio * this._valueRange;\n\t\treturn val ** this.power;\n\t}\n}\n\nexport default PowScale;","import {Chart, Scale } from \"chart.js/auto\";\n\nclass SqrtScale extends Scale {\n\t// Set a unique ID.\n\tstatic id = 'sqrt';\n\n\tparse( raw ) {\n\t\t// Use linear parsing—validate positive values if needed.\n\t\treturn Chart.LinearScale.prototype.parse.call( this, raw );\n\t}\n\n\tdetermineDataLimits() {\n\t\tconst { min, max } = this.getMinMax( true );\n\t\tthis.min           = min >= 0 ? min : 0;\n\t\tthis.max           = max;\n\t}\n\n\tbuildTicks() {\n\t\tconst ticks = [];\n\t\tconst min   = Math.sqrt( this.min || 0 );\n\t\tconst max   = Math.sqrt( this.max || 1 );\n\t\tconst step  = ( max - min ) / 5;  // customize step as needed.\n\t\tfor ( let r = min; r <= max; r += step ) {\n\t\t\tticks.push( { value: r * r } );\n\t\t}\n\t\treturn ticks;\n\t}\n\n\tconfigure() {\n\t\tsuper.configure();\n\t\tthis._start = Math.sqrt( this.min );\n\t\tthis._range = Math.sqrt( this.max ) - this._start;\n\t}\n\n\tgetPixelForValue( value ) {\n\t\tconst v     = Math.sqrt( value );\n\t\tconst ratio = ( v - this._start ) / this._range;\n\t\treturn this.getPixelForDecimal( ratio );\n\t}\n\n\tgetValueForPixel( pixel ) {\n\t\tconst ratio = this.getDecimalForPixel( pixel );\n\t\tconst v     = this._start + ratio * this._range;\n\t\treturn v * v;\n\t}\n}\n\nexport default SqrtScale;","import {Scale} from \"chart.js/auto\";\n\nconst symlogTransform = ( value ) => {\n\treturn Math.sign( value ) * Math.log10( Math.abs( value ) / constant + 1 );\n};\n\nconst symlogInverseTransform = ( value ) => {\n\treturn Math.sign( value ) * ( Math.pow( 10, Math.abs( value ) ) - 1 ) * constant;\n};\n\nclass SymlogScale extends Scale {\n\tparse( raw, index ) {\n\t\tconst value = super.parse( raw, index );\n\t\treturn symlogTransform( value );\n\t}\n\n\tdetermineDataLimits() {\n\t\tconst { min, max } = this.getMinMax( true );\n\t\tthis.min = symlogTransform( min );\n\t\tthis.max = symlogTransform( max );\n\t\tthis._startValue = this.min;\n\t\tthis._valueRange = this.max - this.min;\n\t}\n\n\tgetPixelForValue( value ) {\n\t\tconst symlogValue = symlogTransform( value );\n\t\tconst decimal = ( symlogValue - this._startValue ) / this._valueRange;\n\t\treturn this.getPixelForDecimal( decimal );\n\t}\n\n\tgetLabelForValue( value ) {\n\t\treturn symlogInverseTransform( value ).toLocaleString();\n\t}\n\n\tgenerateTickLabels( ticks ) {\n\t\tconst minimalDecimalPlaces = Math.max( 0, Math.ceil( -Math.log10(\n\t\t\tMath.min( ...ticks.map( t => Math.abs( t.value - ( ticks[0]?.value || 0 ) ) ) ) || 0\n\t\t) ) );\n\t\tticks.forEach( ( tick ) => {\n\t\t\ttick.label = parseFloat( symlogInverseTransform( tick.value )\n\t\t\t\t.toFixed( minimalDecimalPlaces ) ).toString();\n\t\t} );\n\t}\n\n\tbuildTicks() {\n\t\tconst ticks = [];\n\t\tconst tickCount = 11;\n\t\tconst min = symlogInverseTransform( this.min );\n\t\tconst max = symlogInverseTransform( this.max );\n\t\tconst range = max - min;\n\t\tconst stepSize = range / ( tickCount - 1 );\n\n\t\tfor ( let i = min; i <= max; i += stepSize ) {\n\t\t\tticks.push( { value: i } );\n\t\t}\n\t\treturn ticks;\n\t}\n}\n\nSymlogScale.id = 'symlog';\n\nexport default SymlogScale;"],"names":[],"sourceRoot":""}
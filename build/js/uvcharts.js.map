{"version":3,"file":"js/uvcharts.js","mappings":";;;;;;;;;AAAA;AACA,MAAM,KAA0B;AAChC;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA,yEAAyE,WAAW;AACpF,sCAAsC,WAAW;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA,yEAAyE,WAAW;AACpF,sCAAsC,WAAW;;AAEjD;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA,yEAAyE,WAAW;AACpF;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gDAAgD,6BAA6B;AAC7E;;AAEA;AACA;AACA,qEAAqE,SAAS;AAC9E;AACA;AACA,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,gBAAgB;AACjG;;AAEA;AACA,gDAAgD,WAAW;AAC3D;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA,kBAAkB;AAClB,iGAAiG,gBAAgB;;AAEjH,0CAA0C,YAAY;AACtD;AACA;;AAEA,mDAAmD,YAAY;AAC/D;AACA,yDAAyD,aAAa;AACtE;AACA;AACA;AACA,4BAA4B,sDAAsD;AAClF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,aAAa;AACb,WAAW,QAAQ;AACnB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,+EAA+E;AAC1F,WAAW,+EAA+E;AAC1F,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;;AAGA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU,QAAQ;AAClB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,aAAa;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,yCAAyC,8CAA8C;AACvF;;AAEA;AACA,gCAAgC,8FAA8F;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnuHAAuH,gBAAgB;;AAEvI,2CAA2C,WAAW;AACtD;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B,sCAAsC;AAChE,0BAA0B,2EAA2E;AACrG;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B,2EAA2E;AACrG,0BAA0B,sCAAsC;AAChE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,QAAQ;AAClB,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,wCAAwC;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,qCAAqC;AAClE;AACA;AACA;AACA;AACA;AACA,+BAA+B,0CAA0C;AACzE,oCAAoC,yEAAyE;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;;AAEP;AACA,6BAA6B,gCAAgC;AAC7D,6BAA6B,+EAA+E;AAC5G,+BAA+B,sCAAsC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kDAAkD;AACzF;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA,+BAA+B,0CAA0C;AACzE;AACA,gCAAgC,sCAAsC;;;;AAItE;AACA,6BAA6B,8EAA8E;;AAE3G;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,yCAAyC;;AAEjF;AACA;AACA;AACA;AACA;AACA,gCAAgC,qCAAqC;AACrE,gCAAgC,yEAAyE;AACzG;AACA;AACA;AACA;AACA,uCAAuC,yEAAyE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;;;AAGT,uDAAuD,qDAAqD;AAC5G,+BAA+B,+EAA+E;AAC9G,+BAA+B,+CAA+C;AAC9E;AACA,iCAAiC,sCAAsC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA,kCAAkC,8DAA8D;;AAEhG;AACA,6BAA6B,8EAA8E;;;AAG3G;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,8CAA8C;AACrF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,wCAAwC,kDAAkD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAwC;;AAEnE;AACA,4BAA4B,uEAAuE;;AAEnG;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B,iCAAiC;AAC3D,0BAA0B,iEAAiE;AAC3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8EAA8E;AACnH;;AAEA;AACA;AACA;AACA,kCAAkC,iCAAiC;AACnE,iCAAiC,+DAA+D;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wCAAwC;AACpE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B,iEAAiE;AAC3F,0BAA0B,iCAAiC;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8EAA8E;AACnH;;AAEA;AACA;AACA;AACA,kCAAkC,iEAAiE;AACnG,kCAAkC,sCAAsC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wCAAwC;AACpE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,uCAAuC,yCAAyC;AAChF;AACA,0BAA0B,8DAA8D;AACxF,8BAA8B,gEAAgE;AAC9F,8BAA8B,sEAAsE;AACpG;AACA;AACA,sCAAsC,0CAA0C;AAChF,qCAAqC,yCAAyC;;AAE9E;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D;AACxF,6BAA6B,sEAAsE;AACnG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,uCAAuC,yCAAyC;AAChF;AACA,0BAA0B,8DAA8D;AACxF,8BAA8B,gEAAgE;AAC9F,8BAA8B,sEAAsE;AACpG;AACA;AACA,qCAAqC,0CAA0C;AAC/E,qCAAqC,yCAAyC;;AAE9E;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,6BAA6B,8DAA8D;AAC3F,6BAA6B,sEAAsE;AACnG;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;;AAEnD;;AAEA,8CAA8C,WAAW;AACzD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,uEAAuE,oBAAoB,eAAe;AAC3I,6BAA6B,gCAAgC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kEAAkE;AACzG;AACA;AACA;AACA,OAAO;;;AAGP;AACA,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mJAAmJ;AAC9K;AACA;AACA;AACA,mCAAmC,oBAAoB,uEAAuE;AAC9H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D,iCAAiC,uEAAuE,oBAAoB,eAAe;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4EAA4E;AACpH;AACA;AACA;AACA,OAAO;;AAEP;AACA,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2JAA2J;AACtL;AACA;AACA;AACA,mCAAmC,oBAAoB,qFAAqF;AAC5I;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA,uCAAuC,8CAA8C;AACrF;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,kDAAkD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAwC;;AAEnE;AACA,4BAA4B,uEAAuE;;AAEnG;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yCAAyC,WAAW;AACpD,+CAA+C,oCAAoC;AACnF;AACA;AACA,uCAAuC,qDAAqD;;AAE5F,gBAAgB,2BAA2B;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,6CAA6C;AAClF;AACA;;AAEA;AACA,2CAA2C,mDAAmD;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAwC,GAAG;;AAEtE;AACA,4BAA4B,uEAAuE;;AAEnG;AACA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oDAAoD,QAAQ,0BAA0B;AACtF,GAAG;;AAEH,wHAAwH,WAAW;AACnI;AACA;AACA;AACA,uBAAuB;;AAEvB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,uCAAuC,yCAAyC;AAChF;AACA,0BAA0B,8DAA8D;AACxF,2BAA2B,8BAA8B;AACzD,2BAA2B,oCAAoC;AAC/D;AACA;AACA,qCAAqC,0CAA0C;AAC/E,sCAAsC,yCAAyC;;AAE/E;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wBAAwB,8DAA8D;AACtF,wBAAwB,oCAAoC;AAC5D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,uCAAuC,yCAAyC;AAChF;AACA,0BAA0B,8DAA8D;AACxF,2BAA2B,8BAA8B;AACzD,2BAA2B,oCAAoC;AAC/D;AACA;AACA,qCAAqC,0CAA0C;AAC/E,sCAAsC,yCAAyC;;;AAG/E;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D;AACxF,0BAA0B,oCAAoC;AAC9D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;;AAEnD;;AAEA,8CAA8C,WAAW;AACzD;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,qCAAqC,oBAAoB,eAAe;AACzG,6BAA6B,gCAAgC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mEAAmE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;;;AAGP;AACA,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kFAAkF;AAC1G;AACA;AACA;AACA;AACA,mCAAmC,oBAAoB,qCAAqC;;AAE5F;AACA,6BAA6B,8EAA8E;AAC3G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D,iCAAiC,qCAAqC,oBAAoB,eAAe;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wEAAwE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;;;AAGP;AACA,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0FAA0F;AAClH;AACA;AACA;AACA;AACA,mCAAmC,oBAAoB,mDAAmD;;AAE1G;AACA,6BAA6B,8EAA8E;;AAE3G;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,yCAAyC,WAAW;AACpD,yCAAyC,WAAW;;AAEpD;;AAEA,gBAAgB,cAAc;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,qCAAqC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uFAAuF;AAC9H;AACA;AACA;AACA,OAAO;;AAEP;AACA,6BAA6B,+EAA+E;AAC5G,+BAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,6BAA6B,8EAA8E;;AAE3G;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,8BAA8B,qCAAqC;AACnE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA,6BAA6B,+EAA+E;AAC5G;AACA,+BAA+B,uCAAuC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,6BAA6B,8EAA8E;;AAE3G;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,qGAAqG,WAAW;AAChH;;AAEA;AACA;;AAEA,uDAAuD,sBAAsB;AAC7E;AACA;AACA;AACA;AACA,WAAW;AACX,8BAA8B,WAAW;AACzC;;AAEA;AACA;;AAEA;AACA,iGAAiG,WAAW;AAC5G;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,SAAS,aAAa;AACjE;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,0BAA0B,WAAW;AACrC;;AAEA;AACA;AACA,UAAU,QAAQ;AAClB,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,6BAA6B,qCAAqC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iDAAiD;AACrF;AACA;AACA;AACA,OAAO;;AAEP;AACA,6BAA6B,+EAA+E;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,6BAA6B,8EAA8E;;AAE3G;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,qCAAqC;AACpE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,wCAAwC,gEAAgE;AACxG;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA,+BAA+B,+EAA+E;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;;AAEtE;AACA,6BAA6B,8EAA8E;;AAE3G;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC,G;;;;;;UC3iGD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://easy-charts/./src/js/dependencies/uvcharts.js","webpack://easy-charts/webpack/bootstrap","webpack://easy-charts/webpack/before-startup","webpack://easy-charts/webpack/startup","webpack://easy-charts/webpack/after-startup"],"sourcesContent":["(function(global, factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    module.exports = global.document? factory(global, true ): factory(global);\n  } else {\n    factory(global);\n  }\n}(typeof window !== \"undefined\" ? window: this, function(window, noGlobal) {\n  \"use strict\";\n  var uv = {};\n\nuv.util = {};\n\n/**\n* Utility method to extend prototype for JavaScript classes, to act like inheritance\n* @param  {Class} f Original class which is being extended\n* @return {Prototype}   Prototype containing the functions from the super class\n*/\nuv.util.inherits = function (f) {\n  function G() {}\n  G.prototype = f.prototype || f;\n  return new G();\n};\n\n/**\n* Utility method to return a unique identification id\n* @return {number} Timestamp in ms is returned as a unique id\n*/\nuv.util.getUniqueId = function () {\n  return new Date().getTime();\n};\n\nuv.util.getMax = function (graphdef, classification) {\n  switch (classification) {\n    case 'stepup':\n      return this.getStepMaxValue(graphdef);\n    case 'normal':\n      return this.getMaxValue(graphdef);\n    case 'percent':\n      return 100;\n    case 'waterfall':\n      return this.getWaterfallMaxValue(graphdef);\n    default:\n      console.error(\"Unknown classification for chart\", classification);\n  }\n}\n\n/**\n*\n*/\nuv.util.getMaxValue = function (graphdef) {\n  return d3.max(graphdef.categories.map(function (d) {\n    return d3.max(graphdef.dataset[d].map(function (d) {\n      return d.value;\n    }));\n  }));\n};\n\nuv.util.getStepMaxValue = function (graphdef) {\n  var sumMap = graphdef.dataset[graphdef.categories[0]].map(function () {return 0; }),\n    maxMap = sumMap.map(function () { return 0; });\n\n  graphdef.categories.map(function (d) {\n    graphdef.dataset[d].map(function (d, i) {\n      if (d.resetSum === true) {\n        sumMap[i] = 0;\n      }\n      sumMap[i] += d.value;\n      maxMap[i] = d3.max([sumMap[i], maxMap[i]]);\n    });\n  });\n\n  return d3.max(maxMap);\n};\n\nuv.util.getWaterfallMaxValue = function(graphdef) {\n  var sumMap = graphdef.categories.map(function() {return 0;});\n  graphdef.categories.map(function (d, i) {\n    var localMax = 0;\n    graphdef.dataset[d].map(function(d) {\n      localMax += d.value;\n      if(sumMap[i] < localMax) {\n        sumMap[i] = localMax;\n      }\n    });\n  });\n\n  return d3.max(sumMap);\n};\n\nuv.util.getMin = function (graphdef, classification) {\n  switch (classification) {\n    case 'normal':\n      return this.getMinValue(graphdef);\n    case 'stepup':\n      return this.getStepMinValue(graphdef);\n    default:\n      return 0;\n  }\n}\n\n/**\n*\n*/\nuv.util.getMinValue = function (graphdef) {\n  return d3.min([0, d3.min(graphdef.categories.map(function (d) {\n      return d3.min(graphdef.dataset[d].map(function (d) {\n        return d.value;\n      }));\n    }))\n  ]);\n};\n\nuv.util.getStepMinValue = function (graphdef) {\n  var sumMap = graphdef.dataset[graphdef.categories[0]].map(function () {return 0; }),\n    minMap = sumMap.map(function () { return 0; });\n\n  graphdef.categories.map(function (d) {\n    graphdef.dataset[d].map(function (d, i) {\n      sumMap[i] += d.value;\n      minMap[i] = d3.min([sumMap[i], minMap[i]]);\n    });\n  });\n\n  return d3.min(minMap);\n}\n\nuv.util.getSumUpArray = function (graphdef) {\n  var sumMap = graphdef.dataset[graphdef.categories[0]].map(function () {return 0; });\n  graphdef.categories.map(function (d) {\n    graphdef.dataset[d].map(function (d, i) {\n      sumMap[i] += d.value;\n    });\n  });\n\n  return sumMap;\n};\n\nuv.util.getPercentage = function (value, total) {\n  return value* 100 / total;\n};\n\nuv.util.getDataArray = function (graphdef) {\n  return graphdef.categories.map(function (d) { return graphdef.dataset[d]; });\n};\n\nuv.util.getTabularArray = function (graphdef) {\n  var table = [], i, j, catlen, len, arr = [];\n  for (i = 0, len = graphdef.dataset[graphdef.categories[0]].length; i < len; i = i + 1) {\n    arr = [];\n    arr.push(graphdef.dataset[graphdef.categories[0]][i].name);\n    for (j = 0, catlen = graphdef.categories.length; j < catlen; j = j + 1) {\n      arr.push(graphdef.dataset[graphdef.categories[j]][i].value);\n    }\n    table.push(arr);\n  }\n  return table;\n};\n\nuv.util.getLabelArray = function (graphdef, idx) {\n  return graphdef.dataset[graphdef.categories[idx ? idx : 0]].map(function (d) { return d.name; });\n};\n\nuv.util.getCategoryArray = function (graphdef) {\n  return graphdef.categories.map(function (d) { return d; });\n};\n\nuv.util.getCategoryData = function (graphdef, categories) {\n  return categories.map(function (d) {\n    return graphdef.dataset[d].map(function (d) {\n      return d.value;\n    });\n  });\n};\n\nuv.util.transposeData = function (graphdef) {\n  var dataset = {}, i, j, length, jlength, resetSum,\n    name, label, value, categories = graphdef.dataset[graphdef.categories[0]].map(function (d) { return d.name; });\n\n  for (i = 0, length = categories.length; i < length; i = i + 1) {\n    dataset[categories[i]] = [];\n  }\n\n  for (i = 0, length = graphdef.categories.length; i < length; i = i + 1) {\n    name = graphdef.categories[i];\n    for (j = 0, jlength = graphdef.dataset[name].length; j < jlength; j = j + 1) {\n      label = graphdef.dataset[name][j].name;\n      value = graphdef.dataset[name][j].value;\n      resetSum = graphdef.dataset[name][j].resetSum;\n      dataset[label].push({ 'name' : name, 'value' : value, 'resetSum': resetSum });\n    }\n  }\n\n  graphdef.categories = categories;\n  graphdef.dataset = dataset;\n};\n\nuv.util.getPascalCasedName = function (name) {\n  return name.substring(0, 1).toUpperCase() + name.substring(1);\n};\n\nuv.util.getColorBand = function (config, index) {\n  var len = 0,\n    palette = config.graph.palette || 'Default';\n\n  if (config.graph.custompalette && config.graph.custompalette.length !== 0) {\n    len = config.graph.custompalette.length;\n    return config.graph.custompalette[index % len];\n  } else {\n    len = uv.palette[config.graph.palette].length;\n    return uv.palette[config.graph.palette][index % len];\n  }\n};\n\n/**\n* This function finds regular expressions other than Alphabets, Numbers,\n* \"_\" and \"-\" and replaces it with \"-\".\n* @param  {string} name The string which needs to be formatted\n* @return {string}      Returns the formatted String\n*/\nuv.util.formatClassName = function(name){\n  var returnName = name.trim().replace(/[^A-Za-z0-9_\\-]/g,\"-\").toLowerCase();\n  return returnName;\n};\n\nuv.util.svgToPng = function (downloadElmtRef, callback) {\n  if (this.isCanvasSupported()) {\n    var svgContent = d3.select(downloadElmtRef.frame.node().parentNode).html();\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext(\"2d\");\n    canvas.setAttribute('width',d3.select(downloadElmtRef.frame.node()).attr('width'));\n    canvas.setAttribute('height',d3.select(downloadElmtRef.frame.node()).attr('height'));\n    ctx.drawSvg(svgContent);\n    canvas.toBlob(function(blob) {\n      //saveAs(blob, \"png_download\"+Math.ceil(Math.random()*100000)+\".png\");\n      var a = document.createElement(\"a\");\n      document.body.appendChild(a);\n      a.style = \"display: none\";\n      var url = window.URL.createObjectURL(blob);\n      a.href = url;\n      a.download = \"png_download\"+Math.ceil(Math.random()*100000)+\".png\";\n      a.click();\n      //window.URL.revokeObjectURL(url);\n    }, \"image/png\");\n    callback.call();\n  } else {\n    console.log('uvCharts: Download feature is not supported in this version of browser');\n  }\n};\n\nuv.util.isDownloadSupported = function() {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext(\"2d\");\n  return typeof(ctx.drawSvg) === 'function' && typeof(canvas.toBlob) === 'function';\n};\n\nuv.util.isCanvasSupported = function () {\n  var elem = document.createElement('canvas');\n  return !!(elem.getContext && elem.getContext('2d'));\n};\n\n/**\n* This function waits till the end of the transition and then call the callback\n* function which is passed as an argument\n* @param  {transition}   transition It's the current transition\n* @param  {Function} callback   function which is called at the end of\n*                               transition\n*/\nuv.util.endAll = function (transition, callback){\n  var n = 0;\n  transition.each(function() { ++n; }).each(\"end\", function() {\n    if (!--n) {\n      callback.apply(this, arguments);\n    }\n  });\n};\n\n/**\n* This function returns all class names of the element including new class name.\n* Useful in cases where we need to avoid over-writting of classes.\n* @param  {} self this referring to svgElement\n* @param  {String} name new class name to be added\n* @return {String}      All class names as string.\n*/\nuv.util.getClassName = function(self, name) {\n  var formattedName = uv.util.formatClassName(name);\n  if( !d3.select(self).attr('class')) {\n    return formattedName;\n  }\n  if(d3.select(self).attr('class').split(' ').indexOf(formattedName) !== -1) {\n    return d3.select(self).attr('class');\n  }\n  return d3.select(self).attr('class') + \" \" + formattedName;\n};\n\n/**\n* Returns specified value of given data object if integer, else returns formatted value considering precision.\n* @param  self\n* @param  {Number} d    data object\n* @return {Strinig}     value with precision\n*/\nuv.util.getLabelValue = function(self, d) {\n  // if(typeof d.value !== 'number') return null;\n  if (self.config.label.formatter !== undefined) {\n    return self.config.label.formatter(d.value);\n  }\n\n  var val = (d.value % 1 === 0) ? d.value : d.value.toFixed(self.config.label.precision);\n  return self.config.label.prefix + String(val) + self.config.label.suffix;\n};\n\nuv.util._deepClone = function(target, src) {\n    if(typeof src === 'object') {\n        var isEmpty = true;\n        for(var key in src) {\n            isEmpty = false;\n            if(src.hasOwnProperty(key)) {\n              if(target === undefined) {\n                  target = Array.isArray(src) ? [] : {};\n              }\n              target[key] = uv.util._deepClone(target[key], src[key]);\n            }\n        }\n        if(isEmpty){\n            target = Array.isArray(src) ? [] : {};\n        }\n    } else {\n        target = src;\n    }\n    return target;\n};\n\n\n/**\n* Extends properies of rest of the arguments to the first argument.\n* @param  {Object} target\n* @param  {Object} argument1\n* @param  {Object} argumentN\n* @return target object\n*/\nuv.util.extend = function() {\n  if(arguments[0] === undefined || arguments[0] === null) {\n    return arguments[0];\n  }\n    for(var i=1; i<arguments.length; i++) {\n        for(var key in arguments[i]) {\n            if(arguments[i].hasOwnProperty(key)) {\n                arguments[0][key] = uv.util._deepClone(arguments[0][key], arguments[i][key]);\n            }\n        }\n    }\n    return arguments[0];\n};\n\n/**\n* This method returns tool tip text value if config option ‘show tooltiptext’ is true else returns empty string.\n* The text is as per the format specified using %c, %l, %v for category, label and values respectively.\n* Default format is - ‘%c [%l] : %v’\n* @param   self\n* @param  {String} category\n* @param  {String} label\n* @param  {String} value\n* @return {[String]}  tool tip text with specified format.\n*/\nuv.util.getTooltipText = function(self, category, label, value) {\n  if(!self.config.tooltip.show) {\n    return '';\n  }\n  var format = self.config.tooltip.format;\n  if(format === '') {\n    return category + ' [' + label + '] : ' + uv.util.getLabelValue(value);\n  }\n  return format.replace(/%c/gi, category).replace(/%l/gi, label).replace(/%v/gi, uv.util.getLabelValue(self, value));\n};\n\nuv.config = {\n  graph: {\n    palette: 'Default',\n    bgcolor: '#FFFFFF',\n    orientation: 'Horizontal',\n    max: 0,\n    min: 0,\n    custompalette: [],\n    opacity: 1,\n    responsive: false,\n    align: 'xMinYMin',\n    meetOrSlice: 'meet'\n  },\n\n  meta: {\n    position: '#uv-div',\n    caption: '',\n    subcaption: '',\n    hlabel: '',\n    vlabel: '',\n    hsublabel: '',\n    vsublabel: '',\n    isDownloadable: false,\n    downloadLabel: 'Download'\n  },\n\n  dimension: {\n    width: 400,\n    height: 400\n  },\n\n  margin: {\n    top: 50,\n    bottom: 150,\n    left: 100,\n    right: 100\n  },\n\n  frame: {\n    bgcolor: '#FFFFFF'\n  },\n\n  axis: {\n    ticks: 8,\n    subticks: 2,\n    padding: 5,\n    minor: -10,\n    strokecolor: '#000000',\n    fontfamily: 'Arial',\n    fontsize: '14',\n    fontweight: 'bold',\n    showticks: true,\n    showsubticks: true,\n    showtext: true,\n    showhortext: true,\n    showvertext: true,\n    opacity: 0.1\n  },\n\n  label: {\n    fontfamily: 'Arial',\n    fontsize: '11',\n    fontweight: 'normal',\n    strokecolor: '#000000',\n    showlabel: true,\n    precision: 2,\n    prefix: '',\n    suffix: '',\n    formatter: undefined\n  },\n\n  tooltip: {\n    show: true,\n    format: '%c [%l]: %v'\n  },\n\n  scale: {\n    type: 'linear',\n    ordinality: 0.2\n  },\n\n  bar: {\n    strokecolor: 'none',\n    fontfamily: 'Arial',\n    fontsize: '10',\n    fontweight: 'bold',\n    textcolor: '#000'\n  },\n\n  line: {\n    interpolation: 'linear',\n    showcircles: true,\n    circleradius: 3.5,\n    circleopacity: 0.6,\n    fontfamily: 'Arial',\n    fontsize : '10',\n    fontweight: 'bold',\n    textcolor: '#000',\n    strokewidth: 1.5,\n    strokeopacity: 1\n  },\n\n  area: {\n    interpolation: 'cardinal',\n    offset: 'zero',\n    opacity: 0.2\n  },\n\n  pie: {\n    fontfamily: 'Arial',\n    fontsize: '14',\n    fontweight: 'normal',\n    fontvariant: 'small-caps',\n    fontfill: '#FFFFFF',\n    strokecolor: '#FFFFFF',\n    strokewidth: 1\n  },\n\n  donut: {\n    fontfamily: 'Arial',\n    fontsize: '14',\n    fontweight: 'normal',\n    fontvariant: 'small-caps',\n    fontfill: '#000',\n    factor: 0.4,\n    strokecolor: '#FFFFFF',\n    strokewidth: 1\n  },\n\n  caption: {\n    fontfamily: 'Arial',\n    fontsize: '14',\n    fontweight: 'bold',\n    fontvariant: 'small-caps',\n    textdecoration: 'none',\n    hovercolor: '#696969',\n    strokecolor: '#0000FF',\n    textanchor: 'middle',\n    cursor: 'pointer'\n  },\n\n  subCaption: {\n    fontfamily: 'Arial',\n    fontsize: '9',\n    fontweight: 'normal',\n    fontvariant: 'normal',\n    textdecoration: 'none',\n    textanchor: 'middle'\n  },\n\n  legend: {\n    position: 'bottom',\n    fontfamily: 'Arial',\n    fontsize: '11',\n    fontweight: 'normal',\n    color: \"#000000\",\n    strokewidth: 0.15,\n    textmargin: 15,\n    symbolsize: 10,\n    inactivecolor: '#DDD',\n    legendstart: 0,\n    legendtype: 'categories',\n    showlegends: true,\n  },\n\n  effects: {\n    hovercolor: '#FF0000',\n    strokecolor: 'none',\n    textcolor: '#000000',\n    duration: 800,\n    hover: 400,\n    showhovertext: false\n  }\n};\n\nuv.constants = {};\n\nuv.constants.classes = {\n  uv : 'uv',\n  pos : 'uv-div',\n  frame : 'uv-frame',\n  panel : 'uv-panel',\n  bg : 'uv-chart-bg',\n  chart : 'uv-chart',\n  axes : 'uv-axes',\n  legend : 'uv-legend',\n  framebg : 'uv-frame-bg',\n  horaxis : 'uv-hor-axis',\n  veraxis : 'uv-ver-axis',\n  caption : 'uv-caption',\n  captiontext : 'uv-caption-text',\n  subcaption : 'uv-subcaption',\n  subcaptiontext : 'uv-subcaption-text',\n  axeslabelgroup : 'uv-axes-label-group',\n  axeslabel : 'uv-axes-label',\n  axessublabel : 'uv-axes-sub-label',\n  legendsign : 'uv-legend-sign',\n  legendlabel : 'uv-legend-label',\n  hoverbg : 'uv-hover-bg',\n  arc : 'uv-arc-',\n  areapath : 'uv-areapath-',\n  linepath :'uv-linepath-',\n  area : 'uv-area-',\n  line : 'uv-line-',\n  dot : 'uv-dot',\n  chartdiv : 'uv-chart-div',\n  circleticks : 'circle-ticks',\n  download : 'uv-download-options'\n};\n\nuv.constants.downloads = {\n  downloadLabel: 'Download'\n};\n\nuv.types = {};\n\nuv.addChart = function (type, functionName) {\n  uv.types[type] = functionName;\n};\n\nuv.addChart('bar','BarGraph');\nuv.addChart('line','LineGraph');\nuv.addChart('stackedbar','StackedBarGraph');\nuv.addChart('stepupbar','StepUpBarGraph');\nuv.addChart('area','AreaGraph');\nuv.addChart('stackedarea','StackedAreaGraph');\nuv.addChart('percentbar','PercentBarGraph');\nuv.addChart('percentarea','PercentAreaGraph');\nuv.addChart('pie','PieGraph');\nuv.addChart('donut','DonutGraph');\nuv.addChart('waterfall','WaterfallGraph');\nuv.addChart('polararea','PolarAreaGraph');\n\nuv.chart = function (type, graphdef, config) {\n  type = type.toLowerCase()\n  if (uv.types[type] !== undefined) {\n    return new uv[uv.types[type]](graphdef, config);\n  }\n};\n\nuv.effects = {};\n\nuv.effects.bar = {};\nuv.effects.bar.mouseover = function (graph, idx) {\n  var config = graph.config,\n    category = graph.categories[idx],\n    label = graph.labels[idx];\n\n  var effect = function () {\n    graph.frame.selectAll('rect.cr-' + uv.util.formatClassName(category))\n      .transition().duration(config.effects.hover)\n        .style('fill', config.effects.hovercolor)\n        .style('stroke', config.effects.strokecolor);\n\n    if(config.effects.showhovertext){\n      graph.frame.selectAll('text.cr-' + uv.util.formatClassName(category))\n        .transition().duration(config.effects.hover)\n          .style('fill', config.effects.textcolor)\n          .style('opacity', 1);\n    }\n  };\n\n  if(config.legend.legendtype === 'categories'){\n    graph.effects[category].mouseover = effect;\n  }else{\n    graph.effects[label].mouseover = effect;\n  }\n  return effect;\n};\n\nuv.effects.bar.mouseout = function (graph, idx, defColor) {\n  var config = graph.config,\n    category = graph.categories[idx],\n    barColor = uv.util.getColorBand(graph.config, idx),\n    textColor = defColor || uv.util.getColorBand(graph.config, idx),\n    label = graph.labels[idx];\n\n  var effect = function () {\n    graph.frame.selectAll('rect.cr-' + uv.util.formatClassName(category))\n      .transition().duration(config.effects.hover)\n        .style('fill', barColor)\n        .style('stroke', 'none');\n\n    graph.frame.selectAll('text.cr-' + uv.util.formatClassName(category))\n      .transition().duration(config.effects.hover)\n        .style('fill', graph.config.label.showlabel ? textColor : 'none');\n  };\n\n  if(config.legend.legendtype === 'categories'){\n    graph.effects[category].mouseout = effect;\n  }else{\n    graph.effects[label].mouseout = effect;\n  }\n  return effect;\n};\n\nuv.effects.area = {};\nuv.effects.area.mouseover = function (graph, idx) {\n  var config = graph.config,\n    category = graph.categories[idx];\n\n  var effect = function () {\n    graph.frame.selectAll('.cge-' + uv.util.formatClassName(category)).select('path.' + uv.constants.classes.area + uv.util.formatClassName(category))\n    .transition().duration(config.effects.hover)\n    .style('fill',config.effects.hovercolor);\n  };\n\n  graph.effects[category].mouseover = effect;\n  return effect;\n};\n\nuv.effects.area.mouseout = function (graph, idx) {\n  var config = graph.config,\n    category = graph.categories[idx];\n\n  var effect = function () {\n    graph.frame.selectAll('.cge-'+ uv.util.formatClassName(category)).select('path.'+ uv.constants.classes.area + uv.util.formatClassName(category));\n    graph.frame.selectAll('.cge-'+uv.util.formatClassName(category)).select('path.' + uv.constants.classes.area +uv.util.formatClassName(category))\n    .transition().duration(config.effects.hover)\n    .style('fill',uv.util.getColorBand(config,idx));\n  };\n\n  graph.effects[category].mouseout = effect;\n  return effect;\n};\n\n\nuv.effects.line = {};\nuv.effects.line.mouseover = function (graph, idx) {\n  var config = graph.config,\n    category = graph.categories[idx];\n\n  var effect = function () {\n    graph.frame.selectAll('.cge-' + uv.util.formatClassName(category)).selectAll('circle')\n      .transition().duration(config.effects.hover)\n        .style('fill', config.effects.hovercolor)\n        .style('fill-opacity', 1)\n        .style('stroke', config.effects.hovercolor);\n\n    graph.frame.selectAll('.cge-' + uv.util.formatClassName(category)).select('path')\n      .transition().duration(config.effects.hover)\n        .style('stroke', config.effects.hovercolor);\n\n    if(config.effects.showhovertext){\n      graph.frame.selectAll('.cge-' + uv.util.formatClassName(category)).selectAll('text')\n        .transition().duration(config.effects.hover)\n          .style('fill', config.effects.textcolor);\n    }\n  };\n  graph.effects[category].mouseover = effect;\n\n  return effect;\n};\n\nuv.effects.line.mouseout = function (graph, idx, defColor) {\n  var config = graph.config,\n    category = graph.categories[idx],\n    color = defColor || uv.util.getColorBand(graph.config, idx);\n\n  var effect = function () {\n    graph.frame.selectAll('.cge-' + uv.util.formatClassName(category)).selectAll('circle')\n      .transition().duration(config.effects.hover)\n        .style('fill', color)\n        .style('fill-opacity', 0.6)\n        .style('stroke', '#fff');\n\n    graph.frame.selectAll('.cge-' + uv.util.formatClassName(category)).select('path')\n      .transition().duration(config.effects.hover)\n        .style('stroke', color);\n\n    graph.frame.selectAll('.cge-' + uv.util.formatClassName(category)).selectAll('text')\n      .transition().duration(config.effects.hover)\n        .style('fill', graph.config.label.showlabel ? color : 'none');\n\n  };\n  graph.effects[category].mouseout = effect;\n  return effect;\n};\n\nuv.effects.caption = {};\nuv.effects.caption.mouseover = function (config) {\n  return function () {\n    d3.select(this.parentNode.parentNode).select('.' + uv.constants.classes.hoverbg)\n      .transition().duration(config.effects.duration)\n        .style('fill', config.caption.hovercolor);\n  };\n};\n\nuv.effects.caption.mouseout = function (config) {\n  return function () {\n    d3.select(this.parentNode.parentNode).select('.' + uv.constants.classes.hoverbg)\n      .transition().duration(config.effects.duration)\n        .style('fill', config.graph.bgcolor);\n  };\n};\n\nuv.effects.donut = {};\nuv.effects.donut.mouseover = function (center, arcfunc, config, d) {\n  return function (d) {\n    var dev = {\n        x : arcfunc.centroid(d)[0] / 5,\n        y : arcfunc.centroid(d)[1] / 5\n      };\n\n    d3.select(this.parentNode)\n      .transition().duration(config.effects.duration)\n        .attr('transform', 'translate(' + (center.x + dev.x) + ',' + (center.y + dev.y) + ')');\n  };\n};\n\nuv.effects.donut.mouseout = function (center, config) {\n  return function () {\n    d3.select(this.parentNode)\n      .transition().duration(config.effects.duration)\n        .attr('transform', 'translate(' + center.x + ',' + center.y + ')');\n  };\n};\n\nuv.effects.pie = {};\nuv.effects.pie.mouseover = function (graph ,center, arcfunc, config) {\n  var effect =  function (d) {\n    var dev = {\n        x : arcfunc.centroid(d)[0] / 5,\n        y : arcfunc.centroid(d)[1] / 5\n      };\n    d3.select(this.parentNode)\n      .transition().duration(config.effects.duration)\n        .attr('transform', 'translate(' + (center.x + dev.x) + ',' + (center.y + dev.y) + ')');\n  };\n  return effect;\n};\n\nuv.effects.pie.mouseout = function (graph, center, config) {\n  var effect =  function () {\n    d3.select(this.parentNode)\n      .transition().duration(config.effects.duration)\n        .attr('transform', 'translate(' + center.x + ',' + center.y + ')');\n  };\n  return effect;\n};\n\nuv.effects.legend = {};\nuv.effects.legend.mouseover = function (self, idx) {\n  if(self.config.legend.legendtype === 'categories'){\n    return self.effects.group[self.categories[idx]].mouseover;\n  }else{\n    return self.effects.group[self.labels[idx]].mouseover;\n  }\n};\n\nuv.effects.legend.mouseout = function (self, idx) {\n  if(self.config.legend.legendtype === 'categories'){\n    return self.effects.group[self.categories[idx]].mouseout;\n  }else{\n    return self.effects.group[self.labels[idx]].mouseout;\n  }\n};\n\nuv.effects.legend.click = function (i, ctx, graph) {\n  var disabled = (d3.select(ctx).attr('disabled') === 'false') ? false : true;\n  graph.toggleGraphGroup(i);\n  d3.select(ctx).select('rect').style('fill', disabled ? uv.util.getColorBand(graph.config, i) : uv.config.legend.inactivecolor);\n  d3.select(ctx).select('text').style('fill', disabled ? null : uv.config.legend.inactivecolor);\n  d3.select(ctx).attr('disabled', disabled ? 'false' : 'true');\n};\n\nuv.palette = {\n  'Default': ['#00BBC9', '#EC63AB', '#AA8AE4', '#83CE44', '#ff8f25', '#009EAA', '#CA4F7F', '#9C70C0', '#6BAF3B'],\n  'OldDefault' : ['#7E6DA1', '#C2CF30', '#FF8900', '#FE2600', '#E3003F', '#8E1E5F', '#FE2AC2', '#CCF030', '#9900EC', '#3A1AA8', '#3932FE', '#3276FF', '#35B9F6', '#42BC6A', '#91E0CB'],\n  'Plain' : ['#B1EB68', '#B1B9B5', '#FFA16C', '#9B64E7', '#CEE113', '#2F9CFA', '#CA6877', '#EC3D8C', '#9CC66D', '#C73640', '#7D9532', '#B064DC' ],\n  'Android' : ['#33B5E5', '#AA66CC', '#99CC00', '#FFBB33', '#FF4444', '#0099CC', '#9933CC', '#669900', '#FF8800', '#CC0000'],\n  'Soft' : [ '#9ED8D2', '#FFD478', '#F16D9A', '#A8D59D', '#FDC180', '#F05133', '#EDED8A', '#F6A0A5', '#9F218B' ],\n  'Simple' : [ '#FF8181', '#FFB081', '#FFE081', '#EFFF81', '#BFFF81', '#90FF81', '#81FFA2', '#81FFD1', '#9681FF', '#C281FF', '#FF81DD' ],\n  'Egypt' : [ '#3A3E04','#784818','#FCFCA8','#C03C0C','#F0A830','#A8783C','#FCFCFC','#FCE460','#540C00','#C0C084','#3C303C','#1EA34A','#606C54','#F06048' ],\n  'Olive' : [ '#18240C','#3C6C18','#60A824','#90D824','#A8CC60','#789C60','#CCF030','#B4CCA8','#D8F078','#40190D','#E4F0CC' ],\n  'Candid' : [ '#AF5E14','#81400C','#E5785D','#FEBFBF','#A66363','#C7B752','#EFF1A7','#83ADB7','#528F98','#BCEDF5','#446B3D','#8BD96F','#E4FFB9' ],\n  'Sulphide' : [ '#594440','#0392A7','#FFC343','#E2492F','#007257','#B0BC4A','#2E5493','#7C2738','#FF538B','#A593A1','#EBBA86','#E2D9CA' ],\n  'Lint' : ['#A8A878','#F0D89C','#60909C','#242418','#E49C30','#54483C','#306090','#C06C00','#C0C0C0','#847854','#6C3C00','#9C3C3C','#183C60','#FCCC00','#840000','#FCFCFC']\n};\n\n/**\n* uv.Graph is an abstract class of sorts which serves as the base for all other graphs. Instances of it wouldnt be anything except bare bones needed to create a chart.\n* id          - unique id corresponding to the graph, created using current timestamp {#TODO: needs improved logic}\n* graphdef    - definition of the graph, containing data on which the visualization is built\n* config      - configuration of the graph, affecting the visual styling of the graph\n* frame      - <svg> element acting as the parent graph container\n* panel      - <g> element containing everything else, making it easier to move all elements across the svg\n* bg          - <rect> element which acts as the background for the graph\n* effects    - object containing functions which cause the various interactions on the graph\n* labels      - labels from the dataset provided\n* categories  - categories from the dataset provided\n* axes        - object containing axes related stuff: group, func, scale, axis, line, label\n*\n*/\nuv.Graph = function (graphdef, config) {\n  var self = this;\n  self.id = uv.util.getUniqueId();\n  self.graphdef = null;\n  self.config = null;\n\n  self.frame = null;\n  self.panel = null;\n  self.chart = null;\n  self.bg = null;\n  self.effects = {};\n  self.axes = {\n    hor: { group: null, scale : null, func: null, axis : null, line : null, label : null },\n    ver: { group: null, scale : null, func: null, axis : null, line : null, label : null },\n    meta: { min: null, max: null }\n  };\n\n  self.labels = null;\n  self.categories = null;\n\n  self.graphdef = graphdef;\n  self.config = uv.util.extend({}, uv.config, config);\n  return this;\n};\n\n/**\n* As the name suggests, this function initializes graph object construction based on the config and graphdef\n* @param  {Object} graphdef Definition of the graph, take a look at constants.js for complete documentation\n* @param  {Object} config   Configuration of the graph, take a look at config.js for complete documentation\n* @return {Object}          The graph object itself, to support method chaining\n*\n* #TODO: Remove dependency on jQuery/$\n*/\nuv.Graph.prototype.init = function () {\n  var self = this;\n  self.max()\n    .min()\n    .position(self.config.meta.position || 'body')\n    .setDimensions()\n    .setFrame()\n    .setPanel()\n    .setBackground()\n    .setCaption()\n    .setSubCaption()\n    .setMetadata()\n    .setHorizontalAxis()\n    .setVerticalAxis()\n    .setEffectsObject();\n\n  if(self.config.meta.isDownloadable){\n    self.setDownloadOptions();\n  }\n  if(self.config.legend.showlegends){\n    self.setLegend();\n  }\n\n  return self;\n};\n\n/**\n* Sets the dimensions of the graphs, namely height, width and margins: left, right, top and bottom\n* @return {Object}        The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setDimensions = function () {\n  var self = this;\n  self.height(self.config.dimension.height)\n    .width(self.config.dimension.width)\n    .top(self.config.margin.top)\n    .bottom(self.config.margin.bottom)\n    .left(self.config.margin.left)\n    .right(self.config.margin.right);\n\n  return this;\n};\n\n/**\n* This function downloads the graph in png format.\n*\n*/\nuv.Graph.prototype.setDownloadOptions = function () {\n  if (uv.util.isDownloadSupported()) {\n    var self = this;\n    self.download = self.panel.append('g').classed(uv.constants.classes.download, true);\n    self.download.append('text').classed(uv.constants.classes.download, true)\n    .text(self.config.meta.downloadLabel)\n    .attr('y', -self.config.margin.top / 2)\n    .attr('x', self.config.dimension.width-25)\n    .attr('text-anchor', self.config.caption.textanchor)\n    .style('font-family', self.config.caption.fontfamily)\n    .style('font-size', '12')\n    .style('cursor', self.config.caption.cursor)\n    .style('stroke', self.config.caption.strokecolor)\n    .style('text-decoration', 'underline')\n    .on('mouseover', function() {\n      var dnldBtn = d3.select(this);\n      dnldBtn.style('color','#0000FF');\n    })\n    .on('mouseout', function() {\n      var dnldBtn = d3.select(this);\n      dnldBtn.style('color','#8D8D8D');\n    })\n    .on('click', function () {\n      var dnldBtn = d3.select(this);\n      dnldBtn.style('display','none');\n      uv.util.svgToPng(self, function() {\n          dnldBtn.style('display',null);\n      });\n    });\n  }\n};\n\n\n/**\n* Sets the main <svg> element which contains rest of the graph elements\n* @return {Object}        The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setFrame = function () {\n  var self = this;\n  if (!self.frame) {\n    self.frame = d3.select(self.position() || 'body').append('div')\n      .classed(uv.constants.classes.chartdiv, true)\n      .style('display','inline-block')\n      .style('width', '100%')\n      .style('height', '100%')\n      .append('svg');\n  }\n\n  self.frame.attr('id', uv.constants.classes.uv + '-' + self.id)\n    .classed(uv.constants.classes.frame, true);\n\n  if (self.config.graph.responsive === true) {\n    self.frame.attr('width', '100%')\n      .attr('height', '100%')\n      .attr('preserveAspectRatio', self.config.graph.align + ' ' + self.config.graph.meetOrSlice)\n      .attr('viewBox', '0 0 ' + (self.width() + self.left() + self.right()) + ' ' + (self.height() + self.top() + self.bottom()));\n  } else {\n    self.frame.attr('width', self.width() + self.left() + self.right())\n      .attr('height', self.height() + self.top() + self.bottom());\n  }\n\n  self.frame.append('rect').classed(uv.constants.classes.framebg, true)\n    .attr('width', self.width() + self.left() + self.right())\n    .attr('height', self.height() + self.top() + self.bottom())\n    .style('fill', self.config.frame.bgcolor);\n\n  return this;\n};\n\n/**\n* Sets the <g> element which serves as the base position for the graph elements\n* @return {Object}        The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setPanel = function () {\n  var self = this;\n  if (!self.panel) {\n    self.panel = self.frame.append('g');\n  }\n\n  self.panel.attr('id', uv.constants.classes.panel + '-' + self.id)\n    .classed(uv.constants.classes.panel, true)\n    .attr('transform', 'translate(' + self.left() + ',' + self.top() + ')');\n\n  return this;\n};\n\n/**\n* Sets the <rect> element which serves as the background for the chart\n* @param {String} color Color code for the background, set to config value if not specified\n* @return {Object}      The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setBackground = function (color) {\n  var self = this;\n  if (!self.bg) {\n    self.bg = self.panel.append('rect').classed(uv.constants.classes.bg, true)\n            .attr('height', self.height())\n            .attr('width', self.width());\n  }\n  self.bg.style('fill', color || self.config.graph.bgcolor);\n\n  self.chart = self.panel.append('g').classed(uv.constants.classes.chart, true)\n          .style('opacity', self.config.graph.opacity);\n  return this;\n};\n\n/**\n* Sets the caption for the graph\n* @return {Object}      The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setCaption = function () {\n  var self = this;\n  self.caption = self.panel.append('g').classed(uv.constants.classes.caption, true);\n\n  self.caption.append('text').classed(uv.constants.classes.captiontext, true)\n    .text(self.config.meta.caption)\n    .attr('y', -self.config.margin.top / 2)\n    .attr('x', self.config.dimension.width / 2)\n    .attr('text-anchor', self.config.caption.textanchor)\n    .style('font-family', self.config.caption.fontfamily)\n    .style('font-size', self.config.caption.fontsize)\n    .style('font-weight', self.config.caption.fontweight)\n    .style('font-variant', self.config.caption.fontvariant)\n    .style('text-decoration', self.config.caption.textdecoration)\n    .on('mouseover', uv.effects.caption.mouseover(self.config))\n    .on('mouseout', uv.effects.caption.mouseout(self.config));\n\n  return this;\n};\n\n\n/**\n* Sets the subcaption for the graph\n* @return {Object}      The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setSubCaption = function () {\n  var self = this;\n  self.subCaption = self.panel.append('g').classed(uv.constants.classes.subcaption, true);\n\n  self.subCaption.append('text').classed(uv.constants.classes.subcaptiontext, true)\n    .text(self.config.meta.subcaption)\n    .attr('y', -self.config.margin.top / 2 + 1*self.config.caption.fontsize)\n    .attr('x', self.config.dimension.width / 2)\n    .attr('text-anchor', self.config.caption.textanchor)\n    .style('font-family', self.config.subCaption.fontfamily)\n    .style('font-size', self.config.subCaption.fontsize)\n    .style('font-weight', self.config.subCaption.fontweight)\n    .style('font-variant', self.config.subCaption.fontvariant)\n    .style('text-decoration', self.config.subCaption.textdecoration);\n\n  return this;\n};\n\n\n/**\n* Sets the metadata for the graph, this includes the labels and the categories\n* @return {Object}      The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setMetadata = function () {\n  var self = this;\n  self.labels = uv.util.getLabelArray(self.graphdef);\n  self.categories = uv.util.getCategoryArray(self.graphdef);\n  return this;\n};\n\n/**\n* Sets the Horizontal Axis functions but doesnt render it yet\n* return {Object}      The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setHorizontalAxis = function () {\n  var self = this;\n  var graphdef = self.graphdef;\n  if (!self.axes.hor.group) {\n    self.axes.hor.group = self.panel.append('g').classed(uv.constants.classes.horaxis, true)\n                  .attr('transform', 'translate(0,' + self.height() + ')')\n                  .style('shape-rendering','crispEdges');\n  }\n\n  if (self.config.graph.orientation === 'Horizontal') {\n    self.axes.hor.scale  = d3.scale[self.config.scale.type]()\n                .domain([self.config.scale.type === 'log' ? 1: self.min(), self.max()])\n                .range([0, self.width()]);\n\n    if (self.axes.hor.scale.nice) {\n      self.axes.hor.scale.nice();\n    }\n\n    if(!self.config.axis.showsubticks){\n      self.config.axis.subticks = 0;\n    }\n    self.axes.hor.func = d3.svg.axis()\n                .scale(self.axes.hor.scale)\n                .ticks(self.config.axis.ticks)\n                .tickSize(-self.height(), self.config.axis.minor, 0)\n                .tickPadding(self.config.axis.padding)\n                .tickSubdivide(self.config.axis.subticks)\n                .orient('bottom');\n\n  } else {\n    self.axes.hor.scale = d3.scale.ordinal()\n                .rangeRoundBands([0, self.width()], self.config.scale.ordinality);\n\n    self.axes.hor.func = d3.svg.axis()\n                .scale(self.axes.hor.scale)\n                .tickPadding(self.config.axis.padding)\n                .orient('bottom');\n\n    if(!self.config.axis.showtext || !self.config.axis.showhortext) {\n      self.axes.hor.func.tickSize(0);\n    }\n  }\n  if(!self.config.axis.showtext || !self.config.axis.showhortext) {\n      self.axes.hor.func.tickFormat(function (d) { return ''; });\n  }\n\n  return this;\n};\n\n/**\n* Sets the Vertical axis functions, but doesnt render it yet\n* @return {Object}        The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setVerticalAxis = function () {\n  var self = this;\n  var graphdef = self.graphdef;\n  if (!self.axes.ver.group) {\n    self.axes.ver.group = self.panel.append('g').classed(uv.constants.classes.veraxis, true)\n                              .style('shape-rendering','crispEdges');\n  }\n\n  if (self.config.graph.orientation === 'Vertical') {\n    self.axes.ver.scale  = d3.scale[self.config.scale.type]()\n                .domain([self.max(), self.config.scale.type === 'log' ? 1 : self.min()])\n                .range([0, self.height()]);\n\n    if (self.axes.ver.scale.nice) {\n      self.axes.ver.scale.nice();\n    }\n\n    if(!self.config.axis.showsubticks){\n      self.config.axis.subticks = 0;\n    }\n    self.axes.ver.func = d3.svg.axis()\n                .scale(self.axes.ver.scale)\n                .ticks(self.config.axis.ticks)\n                .tickSize(-self.width(), self.config.axis.minor, 0)\n                .tickPadding(self.config.axis.padding)\n                .tickSubdivide(self.config.axis.subticks)\n                .orient('left');\n\n\n  } else {\n    self.axes.ver.scale = d3.scale.ordinal()\n                .rangeRoundBands([0, self.height()], self.config.scale.ordinality);\n\n    self.axes.ver.func = d3.svg.axis()\n                .scale(self.axes.ver.scale)\n                .tickPadding(self.config.axis.padding)\n                .orient('left');\n\n    if(!self.config.axis.showtext || !self.config.axis.showvertext){\n      self.axes.ver.func.tickSize(0);\n    }\n  }\n  if(!self.config.axis.showtext || !self.config.axis.showvertext) {\n    self.axes.ver.func.tickFormat(function (d) { return ''; });\n  }\n\n  return this;\n};\n\n/**\n* Creates placeholders for functions which cause the various animations across the graph to be able invoke it from other places\n* @return {Object}        The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setEffectsObject = function () {\n  var self = this;\n  var effectArray = (self.config.legend.legendtype === 'categories') ? self.categories : self.labels;\n  for (var i = 0; i < effectArray.length ; i++) {\n    self.effects[effectArray[i]] = {};\n  }\n  return self;\n};\n\n/**\n* Draws the horizontal axis within the frame based on the orientation and functions already created\n* @return {Object} The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.drawHorizontalAxis = function () {\n  var self = this;\n  self.axes.hor.axis = self.axes.hor.group.append('g')\n                .style('font-family', self.config.label.fontfamily)\n                .style('font-size', self.config.label.fontsize)\n                .style('font-weight', self.config.label.fontweight)\n                .call(self.axes.hor.func);\n\n  if (self.config.axis.showticks) {\n    self.axes.hor.axis.selectAll('line').style('stroke', self.config.axis.strokecolor)\n                .style('opacity', self.config.axis.opacity);\n  }\n  self.axes.hor.axis.selectAll('path').style('fill','none');\n\n  self.axes.hor.line = self.panel.append('line')\n                .classed(uv.constants.classes.horaxis, true)\n                .attr('y1', self.config.graph.orientation === 'Horizontal' ? self.height() : self.axes.ver.scale(0))\n                .attr('y2', self.config.graph.orientation === 'Horizontal' ? self.height() : self.axes.ver.scale(0))\n                .attr('x1', '0')\n                .attr('x2', self.width())\n                .style('stroke', self.config.axis.strokecolor);\n\n  self.axes.hor.label = self.axes.hor.group.append('g')\n                            .classed(uv.constants.classes.axeslabelgroup, true)\n                            .attr('transform', 'translate(' + self.width()/2 + ',' + (1*self.config.margin.bottom/4 + 1*self.config.label.fontsize) + ')');\n\n  self.axes.hor.label.append('text')\n                .attr('display','block')\n                .classed(uv.constants.classes.axeslabel, true).classed('cal', true)\n                .attr('text-anchor','middle')\n                .style('font-size', self.config.axis.fontsize)\n                .style('font-family', self.config.axis.fontfamily)\n                .text(self.config.meta.hlabel);\n\n  self.axes.hor.label.append('text')\n                .attr('display','block')\n                .attr('y', 1*self.config.axis.fontsize)\n                .attr(uv.constants.classes.axessublabel, true).classed('casl', true)\n                .attr('text-anchor','middle')\n                .style('font-size', self.config.axis.fontsize - 2)\n                .style('font-family', self.config.axis.fontfamily)\n                .text(self.config.meta.hsublabel);\n\n  return this;\n};\n\n/**\n* Draws the vertical axis within the frame based on the orientation and functions already created\n* @return {Object} The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.drawVerticalAxis = function () {\n  var self = this;\n  self.axes.ver.axis = self.axes.ver.group.append('g')\n                .classed(uv.constants.classes.axes, true)\n                .style('font-family', self.config.label.fontfamily)\n                .style('font-size', self.config.label.fontsize)\n                .style('font-weight', self.config.label.fontweight)\n                .call(self.axes.ver.func);\n\n  if (self.config.axis.showticks) {\n    self.axes.ver.axis.selectAll('line').style('stroke', self.config.axis.strokecolor)\n                .style('opacity', self.config.axis.opacity);\n  }\n  self.axes.ver.axis.selectAll('path').style('fill','none');\n\n  self.axes.ver.line = self.panel.append('line')\n                .classed(uv.constants.classes.veraxis, true)\n                .attr('x1', self.config.graph.orientation === 'Horizontal'? self.axes.hor.scale(0): 0)\n                .attr('x2', self.config.graph.orientation === 'Horizontal'? self.axes.hor.scale(0): 0)\n                .attr('y1', 0)\n                .attr('y2', self.height())\n                .style('stroke', self.config.axis.strokecolor);\n\n  self.axes.ver.label = self.axes.ver.group.append('g')\n                .attr('transform', 'translate(' + -4*self.config.margin.left/5 + ',' + self.height()/2 + ')rotate(270)');\n\n  self.axes.ver.label.append('text').classed(uv.constants.classes.axeslabel, true)\n                .attr('text-anchor', 'middle')\n                .classed('cal', true)\n                .style('font-family', self.config.axis.fontfamily)\n                .style('font-size', self.config.axis.fontsize)\n                .text(self.config.meta.vlabel);\n\n  self.axes.ver.label.append('text').classed(uv.constants.classes.axessublabel, true)\n                .attr('text-anchor', 'middle')\n                .attr('y', +self.config.axis.fontsize)\n                .classed('casl', true)\n                .style('font-family', self.config.axis.fontfamily)\n                .style('font-size', self.config.axis.fontsize - 2)\n                .text(self.config.meta.vsublabel);\n\n  return this;\n};\n\n/**\n* Sets the legend and related interactions for the graph based on the configuration\n* @return {Object}  The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.setLegend = function () {\n  var self = this;\n\n  var legendgroup = self.panel.append('g').classed(uv.constants.classes.legend, true)\n            .attr('transform', function(d, i){\n              if(self.config.legend.position === 'right'){\n                return 'translate(' + self.width() + ', 10)';\n              }else if(self.config.legend.position === 'bottom'){\n                var pos =  self.height() + self.config.margin.bottom/2 + Number(self.config.axis.fontsize);\n                return 'translate(0, ' + pos +  ')';\n              }\n            });\n\n  self.legends = legendgroup.selectAll('g').data(\n    (self.config.legend.legendtype === 'categories') ? self.categories:self.labels\n  );\n\n\n  self.legends.enter().append('g')\n      .attr('transform', function (d, i) {\n        if(self.config.legend.position === 'right'){\n          return 'translate(10,' + 10* (2* i - 1) + ')';\n        }else if(self.config.legend.position === 'bottom'){\n          var hPos = 100*i - self.config.dimension.width*self.config.legend.legendstart;\n          var vPos = 20*self.config.legend.legendstart;\n          if(hPos >= self.config.dimension.width){\n            self.config.legend.legendstart = self.config.legend.legendstart + 1;\n            hPos = 100*i - self.config.dimension.width*self.config.legend.legendstart;\n            vPos = 20*self.config.legend.legendstart;\n          }\n          return 'translate(' + hPos + ',' + vPos + ')';\n        }\n      })\n      .attr('class', function (d, i) {\n        var className = (self.config.legend.legendtype === 'categories') ? self.categories[i]:self.labels[i];\n        return uv.util.getClassName(this, 'cl-' + className);\n      })\n      .attr('disabled', 'false')\n      .on('mouseover', function (d, i) {\n        if (self.effects[d].mouseover && typeof self.effects[d].mouseover === 'function') {\n          self.effects[d].mouseover();\n        }\n      })\n      .on('mouseout', function (d, i) {\n        if (self.effects[d].mouseout && typeof self.effects[d].mouseout === 'function') {\n          self.effects[d].mouseout();\n        }\n      })\n      .on('click', function (d, i) {\n        uv.effects.legend.click(i, this, self);\n      });\n\n  self.legends.append('rect').classed(uv.constants.classes.legendsign, true)\n        .attr('height', self.config.legend.symbolsize)\n        .attr('width', self.config.legend.symbolsize)\n        .style('fill', function (d, i) { return uv.util.getColorBand(self.config, i); })\n        .style('stroke', 'none');\n\n  self.legends.append('text').classed(uv.constants.classes.legendlabel, true)\n        .text(function (d, i) { return (self.config.legend.legendtype === 'categories') ? self.categories[i]:self.labels[i]; })\n        .attr('dx', self.config.legend.textmargin)\n        .attr('dy', '.71em')\n        .attr('text-anchor', 'start')\n        .style('stroke', self.config.legend.color)\n        .style('fill', self.config.legend.color)\n        .style('stroke-width', self.config.legend.strokewidth)\n        .style('font-family', self.config.legend.fontfamily)\n        .style('font-size', self.config.legend.fontsize)\n        .style('font-weight', self.config.legend.fontweight);\n\n  return this;\n};\n\n/**\n* Finalizes stuff related to graph, used in conjuction with init to setup all the generic graph stuff\n* @param  {Boolean} isLoggable Specifies whether the graph object should be logged or not, for debug purpose only\n* @return {Object}             The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.finalize = function (isLoggable) {\n  var self = this;\n  self.drawHorizontalAxis()\n    .drawVerticalAxis();\n  //  .setLegend();\n\n  // Cursor for text is unset from text to normal\n  self.frame.selectAll('text').style('cursor', 'default');\n\n  //Log Graph object if flag set to truthy value\n  if (isLoggable) {\n    console.log(self);\n  }\n  return this;\n};\n\n/*\n* Functions to remove individual elements of an graph\n*/\n\n/**\n* Removes the entire graph object\n* @return {Object} The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.remove = function () {\n  this.frame.remove();\n  return this;\n};\n\n/**\n* Removes the caption component of the graph\n* @return {Object} The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.removeCaption = function () {\n  this.caption.remove();\n  return this;\n};\n\n/**\n* Removes the legend component of the graph\n* @return {Object} The graph object itself, to support method chaining\n*/\nuv.Graph.prototype.removeLegend = function () {\n  if (this.legends[0]) {\n    this.legends[0].parentNode.remove();\n  }\n\n  return this;\n};\n\nuv.Graph.prototype.removePanel = function () {\n  this.panel.remove();\n  return this;\n};\n\nuv.Graph.prototype.removeHorAxis = function () {\n  this.panel.selectAll('g.' + uv.constants.classes.horaxis + \" >*\").remove();\n  this.panel.selectAll('line.' + uv.constants.classes.horaxis).remove();\n  return this;\n};\n\nuv.Graph.prototype.removeVerAxis = function () {\n  this.panel.selectAll('g.' + uv.constants.classes.veraxis + \" >*\").remove();\n  this.panel.selectAll('line.' + uv.constants.classes.veraxis).remove();\n  return this;\n};\n\n/*\n* Setters and getters for various common properties of the graph\n*/\n\nuv.Graph.prototype.width = function (w) {\n  if (w) {\n    this.config.dimension.width = w;\n    return this;\n  }\n\n  return this.config.dimension.width;\n};\n\nuv.Graph.prototype.height = function (h) {\n  if (h) {\n    this.config.dimension.height = h;\n    return this;\n  }\n\n  return this.config.dimension.height;\n};\n\nuv.Graph.prototype.top = function (t) {\n  if (t) {\n    this.config.margin.top = t;\n    return this;\n  }\n\n  return this.config.margin.top;\n};\n\nuv.Graph.prototype.bottom = function (b) {\n  if (b) {\n    this.config.margin.bottom = b;\n    return this;\n  }\n\n  return this.config.margin.bottom;\n};\n\nuv.Graph.prototype.left = function (l) {\n  if (l) {\n    this.config.margin.left = l;\n    return this;\n  }\n\n  return this.config.margin.left;\n};\n\nuv.Graph.prototype.right = function (r) {\n  if (r) {\n    this.config.margin.right = r;\n    return this;\n  }\n\n  return this.config.margin.right;\n};\n\nuv.Graph.prototype.position = function (pos) {\n  if (pos) {\n    this.config.meta.position = pos;\n    return this;\n  }\n\n  return this.config.meta.position;\n};\n\nuv.Graph.prototype.caption = function (caption) {\n  if (caption) {\n    this.config.meta.caption = caption;\n    return this;\n  }\n\n  return this.config.meta.caption;\n};\n\nuv.Graph.prototype.subCaption = function (subCaption) {\n  if (subCaption) {\n    this.config.meta.subCaption = subCaption;\n    return this;\n  }\n\n  return this.config.meta.caption;\n};\n\nuv.Graph.prototype.isDownloadable = function (isDownload) {\n  if (isDownload) {\n    this.config.meta.isDownload = isDownload;\n    return this;\n  }\n\n  return this.config.meta.isDownload;\n};\n\nuv.Graph.prototype.max = function () {\n  if (this.axes.meta.max !== null) {\n    return this.axes.meta.max;\n  }\n\n  this.axes.meta.max = uv.util.getMax(this.graphdef, this.graphdef.stepup);\n  return this;\n}\n\nuv.Graph.prototype.min = function () {\n  if (this.axes.meta.min !== null) {\n    return this.axes.meta.min;\n  }\n\n  this.axes.meta.min = uv.util.getMin(this.graphdef, this.graphdef.stepup);\n  return this;\n}\n\n/* Additional Graph functions*/\nuv.Graph.prototype.toggleGraphGroup = function (i) {\n  var self = this, category = self.categories[i],\n      state = self.frame.select('g.cge-' + uv.util.formatClassName(category)).style('display'),\n      color = uv.util.getColorBand(self.config, i);\n\n  self.frame.selectAll('g.cge-' + uv.util.formatClassName(category)).style('display', (state === 'none')? null : 'none');\n  return this;\n};\n\nuv.AreaGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.areagroups = [];\n  self.dataset = uv.util.getDataArray(self.graphdef);\n\n  var areagroup, areapath, areafunc, idx, len,\n    domainData = self.graphdef.dataset[self.graphdef.categories[0]];\n\n  self.axes[self.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(domainData.map(function (d) { return d.name; }));\n\n  for (idx = 0, len = self.dataset.length; idx < len; idx = idx + 1) {\n    areapath = self.chart.append('g').classed('cg-' + uv.util.formatClassName(self.categories[idx]), true)\n                        .append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true).datum(self.dataset[idx]);\n    areagroup = { path: areapath, linefunc: undefined, areafunc: undefined, line: undefined, area: undefined };\n    self['draw' + self.config.graph.orientation + 'Area'](areagroup, idx);\n    self.areagroups.push(areagroup);\n  }\n\n  self.finalize();\n};\n\nuv.AreaGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.AreaGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'normal';\n  return this;\n};\n\nuv.AreaGraph.prototype.drawHorizontalArea = function (areagroup, idx) {\n  var self = this,\n    color = uv.util.getColorBand(self.config, idx);\n\n  self.axes.ver.scale.rangePoints([0, self.height()]);\n\n  areagroup.linefunc = d3.svg.line()\n        .x(function (d) { return self.axes.hor.scale(d.value); })\n        .y(function (d) { return self.axes.ver.scale(d.name) + self.axes.ver.scale.rangeBand() / 2; })\n        .interpolate(self.config.area.interpolation);\n\n  areagroup.areafunc = d3.svg.area()\n        .x0(self.axes.hor.scale(0))\n        .x1(areagroup.linefunc.x())\n        .y(areagroup.linefunc.y())\n        .interpolate(self.config.area.interpolation);\n\n  areagroup.area = areagroup.path.append('svg:path')\n        .classed(uv.constants.classes.areapath + idx, true)\n        .attr('d', areagroup.areafunc)\n        .style('opacity', self.config.area.opacity)\n        .style('-moz-opacity', self.config.area.opacity)\n        .style('fill', color);\n\n  areagroup.line = areagroup.path.append('svg:path')\n        .classed(uv.constants.classes.linepath + idx, true)\n        .attr('d', areagroup.linefunc)\n        .style('stroke', 'white')\n        .style('fill', 'none');\n\n  areagroup.path.selectAll('.' + uv.constants.classes.dot)\n        .data(self.dataset[idx])\n        .enter().append('circle')\n        .classed(uv.constants.classes.dot, true)\n        .attr('cx', areagroup.linefunc.x())\n        .attr('cy', areagroup.linefunc.y())\n        .attr('r', 3.5)\n        .style('fill', 'white');\n};\n\nuv.AreaGraph.prototype.drawVerticalArea = function (areagroup, idx) {\n  var self = this,\n    color = uv.util.getColorBand(self.config, idx);\n\n  self.axes.hor.scale.rangePoints([0, self.width()]);\n\n  areagroup.linefunc = d3.svg.line()\n        .x(function (d) { return self.axes.hor.scale(d.name) + self.axes.hor.scale.rangeBand() / 2; })\n        .y(function (d) { return self.axes.ver.scale(d.value); })\n        .interpolate(self.config.area.interpolation);\n\n  areagroup.areafunc = d3.svg.area()\n        .x(areagroup.linefunc.x())\n        .y0(areagroup.linefunc.y())\n        .y1(self.axes.ver.scale(0))\n        .interpolate(self.config.area.interpolation);\n\n  areagroup.area = areagroup.path.append('svg:path')\n        .classed(uv.constants.classes.areapath + idx, true)\n        .attr('d', areagroup.areafunc)\n        .style('opacity', self.config.area.opacity)\n        .style('-moz-opacity', self.config.area.opacity)\n        .style('fill', color);\n\n  areagroup.line = areagroup.path.append('svg:path')\n        .classed(uv.constants.classes.linepath + idx, true)\n        .attr('d', areagroup.linefunc)\n        .style('stroke', 'white')\n        .style('fill', 'none');\n\n  areagroup.path.selectAll('.' + uv.constants.classes.dot)\n        .data(self.dataset[idx])\n        .enter().append('circle')\n        .classed(uv.constants.classes.dot, true)\n        .attr('cx', areagroup.linefunc.x())\n        .attr('cy', areagroup.linefunc.y())\n        .attr('r', 3.5)\n        .style('fill', 'white');\n};\n\n/**\n* A normal 2d bar chart capable of being rendered in horizontal and vertical manner\n* @param {Object} graphdef Definition of the graph being rendered\n* @param {Object} config   Configuration of the graph being rendered\n*/\nuv.BarGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.bargroups = {};\n\n  self.axes[self.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(self.labels);\n\n  var idx, length = self.categories.length, category;\n  for (idx = 0; idx < length; idx = idx + 1) {\n    category = self.categories[idx];\n    self.bargroups[category] = self.chart.append('g').classed('cg-' + uv.util.formatClassName(category), true);\n    self['draw' + self.config.graph.orientation + 'Bars'](idx);\n  }\n\n  self.finalize();\n};\n\nuv.BarGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.BarGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'normal';\n  return this;\n};\n\nuv.BarGraph.prototype.drawHorizontalBars = function (idx) {\n  var self = this,\n    color = uv.util.getColorBand(this.config, idx),\n    len = self.categories.length;\n\n  var bars = self.bargroups[self.categories[idx]].selectAll('g').data(self.graphdef.dataset[self.categories[idx]]).enter()\n        .append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true)\n        .attr('transform', function (d) { if (d.value < 0) return 'scale(-1,1)'; });\n\n  bars.append('rect')\n    .classed(uv.util.formatClassName(self.categories[idx]), true)\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .attr('height', self.axes.ver.scale.rangeBand() / len)\n    .attr('x', function (d) {\n      return (d.value < 0) ? (-self.axes.hor.scale(0)) : self.axes.hor.scale(0);\n    })\n    .attr('y', function (d) {return self.axes.ver.scale(d.name); })\n    .attr('width', 0)\n    .style('stroke', self.config.bar.strokecolor)\n    .style('fill', color)\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(function (d, i) { return i * self.config.effects.duration; })\n      .attr('width', function (d) { return self.axes.hor.scale(Math.abs(d.value)) - self.axes.hor.scale(0); })\n      .call(uv.util.endAll, function (d,i){\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseover', uv.effects.bar.mouseover(self, idx));\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseout', uv.effects.bar.mouseout(self, idx));\n        if (typeof self.config.graph.clickCallback === \"function\") {\n          d3.select(this.parentNode.parentNode).selectAll('rect').on('click', function(_d){\n              self.config.graph.clickCallback.apply(null, [_d]);\n          });\n        }\n      });\n\n  bars.append('text')\n    .attr('x', function(d) { return self.axes.hor.scale(0); })\n    .attr('y', function(d) { return self.axes.ver.scale(d.name) + (self.axes.ver.scale.rangeBand()/len)/2; })\n    .attr('dx', function (d) { return (d.value < 0)? '-20px': '4px' })\n    .attr('dy', '.35em')\n    .attr('text-anchor', 'start')\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('fill', self.config.label.showlabel ? uv.util.getColorBand(self.config, idx) : 'none')\n    .style('font-family', self.config.bar.fontfamily)\n    .style('font-size', self.config.bar.fontsize)\n    .style('font-weight', self.config.bar.fontweight)\n    .style('transform', function (d) { return d.value < 0? 'scale(-1,1)': 'scale(1,1)'; })\n    .style('opacity', 0)\n    .text(function(d) { return uv.util.getLabelValue(self, d); })\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(function (d, i) { return i * self.config.effects.duration; })\n      .style('opacity', 1)\n      .attr('x', function (d) { return self.axes.hor.scale(d.value); });\n\n\n\n  bars.append('svg:title')\n    .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n\n  self.bargroups[self.categories[idx]].attr('transform', 'translate(0,' + idx * self.axes.ver.scale.rangeBand() / len + ')');\n};\n\nuv.BarGraph.prototype.drawVerticalBars = function (idx) {\n  var self = this,\n    color = uv.util.getColorBand(this.config, idx),\n    len = self.categories.length;\n\n  var bars = self.bargroups[self.categories[idx]].selectAll('g').data(self.graphdef.dataset[self.categories[idx]]).enter()\n      .append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true)\n      .attr('transform', function (d) { if (d.value < 0) return 'scale(1, -1)'; });\n\n  bars.append('rect')\n      .classed(uv.util.formatClassName(self.categories[idx]), true)\n      .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n      .attr('height', 0)\n      .attr('width', self.axes.hor.scale.rangeBand() / len)\n      .attr('x', function (d) { return self.axes.hor.scale(d.name); })\n      .attr('y', function (d) { return (d.value < 0? -1: 1) * (self.height() - self.axes.ver.scale(0)); })\n      .style('stroke', self.config.bar.strokecolor).style('fill', color)\n      .transition()\n        .duration(self.config.effects.duration)\n        .delay(idx * self.config.effects.duration)\n        .attr('height', function (d) { return Math.abs(self.axes.ver.scale(0) - self.axes.ver.scale(d.value)); })\n        .call(uv.util.endAll, function (d,i){\n          d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseover', uv.effects.bar.mouseover(self, idx));\n          d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseout', uv.effects.bar.mouseout(self, idx));\n          if(typeof self.config.graph.clickCallback === \"function\") {\n            d3.select(this.parentNode.parentNode).selectAll('rect').on('click', function(_d){\n              self.config.graph.clickCallback.apply(null, [_d]);\n          });\n        }\n        });\n\n\n  bars.append('text').attr('transform', function (d) { return (d.value < 0) ? 'scale(1,1)': 'scale(1,-1)'; })\n      .attr('x', function(d) { return self.axes.hor.scale(d.name) + (self.axes.hor.scale.rangeBand()/len)/2; })\n      .attr('y', function(d) { return self.height() - self.axes.ver.scale(0) })\n      .attr('dx', 0)\n      .attr('dy', function (d) { return d.value < 0 ? '2em' : '.35em' })\n      .attr('text-anchor', 'middle')\n      .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n      .style('fill', self.config.label.showlabel ? uv.util.getColorBand(self.config, idx) : 'none')\n      .style('font-family', self.config.bar.fontfamily)\n      .style('font-size', self.config.bar.fontsize)\n      .style('font-weight', self.config.bar.fontweight)\n      .style('opacity', 0)\n      .text(function(d) { return uv.util.getLabelValue(self, d); })\n      .transition()\n        .duration(self.config.effects.duration)\n        .delay(idx * self.config.effects.duration)\n        .style('opacity', 1)\n        .attr('y', function (d) { return -(self.height() - self.axes.ver.scale(d.value)) - 10; });\n\n  bars.append('svg:title')\n    .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n\n\n  self.bargroups[self.categories[idx]].attr('transform', 'translate(' + idx * self.axes.hor.scale.rangeBand() / len + ',' + self.height() + ') scale(1,-1)');\n};\n\nuv.DonutGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.radius = Math.min(self.height(), self.width()) * 2 / 5;\n  self.center = {\n    x : self.width() / 2,\n    y : self.height() / 2\n  };\n\n  self.category = graphdef.categories[0];\n\n  var data = uv.util.getCategoryData(self.graphdef, [self.category]),\n    arcfunc = d3.svg.arc().innerRadius(self.radius * self.config.donut.factor).outerRadius(self.radius),\n    layout = d3.layout.pie();\n\n  self.chart.data(data);\n  self.arcs = self.chart.selectAll('g.arc')\n          .data(layout).enter()\n          .append('g').classed(uv.constants.classes.arc + uv.util.formatClassName(self.category), true)\n          .attr('transform', 'translate(' + self.center.x + ',' + self.center.y + ')');\n\n  self.arcs.append('path')\n      .attr('d', arcfunc)\n      .style('fill', function (d, i) { return uv.util.getColorBand(self.config, i); })\n      .style('stroke', self.config.donut.strokecolor)\n      .style('stroke-width', self.config.donut.strokewidth)\n    .on('mouseover', uv.effects.donut.mouseover(self.center, arcfunc, self.config))\n    .on('mouseout', uv.effects.donut.mouseout(self.center, self.config))\n\n  if (typeof self.config.graph.clickCallback === \"function\") {\n    self.arcs.on('click', function (d) {\n      self.config.graph.clickCallback.apply(null, [d]);\n    });\n  }\n\n  self.arcs.append('text')\n      .attr('transform', function (d) { return 'translate(' + arcfunc.centroid(d) + ')'; })\n      .attr('dy', '.35em')\n      .attr('text-anchor', 'middle')\n      .style('fill', self.config.label.showlabel ? self.config.donut.fontfill : 'none')\n      .style('font-family', self.config.donut.fontfamily)\n      .style('font-size', self.config.donut.fontsize)\n      .style('font-weight', self.config.donut.fontweight)\n      .style('font-variant', self.config.donut.fontvariant)\n      .text(function (d) { return uv.util.getLabelValue(self, d); });\n\n  self.arcs.append('svg:title')\n    .text(function (d, i) { return uv.util.getTooltipText(self, self.category, self.labels[i], d);});\n\n};\n\nuv.DonutGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.DonutGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'normal';\n  self.config.legend.legendtype = 'labels';\n  return this;\n};\n\nuv.LineGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.linegroups = {};\n  self.dataset = uv.util.getDataArray(self.graphdef);\n\n  var linegroup, linepath, linefunc, idx, len = self.categories.length,\n    domainData = self.labels;\n\n  self.axes[self.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(domainData);\n\n  for (idx = 0; idx < len; idx = idx + 1) {\n    linepath = self.chart.append('g').classed('cg-' + uv.util.formatClassName(self.categories[idx]), true)\n                        .append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true).datum(self.dataset[idx]);\n    linegroup = {\n      path: linepath,\n      func: undefined\n    };\n\n    self['draw' + self.config.graph.orientation + 'Lines'](linegroup, idx);\n    self.linegroups[self.categories[idx]] = linegroup;\n  }\n\n  self.finalize();\n};\n\nuv.LineGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.LineGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'normal';\n  self.config.scale.ordinality = 0;\n  return this;\n};\n\nuv.LineGraph.prototype.drawHorizontalLines = function (linegroup, idx) {\n  var self = this,\n    axes = self.axes,\n    config = self.config,\n    color = uv.util.getColorBand(self.config, idx);\n\n  self.axes.ver.scale.rangePoints([0, self.height()]);\n\n  linegroup.func = d3.svg.line()\n        .x(function (d) { return axes.hor.scale(d.value); })\n        .y(function (d) { return axes.ver.scale(d.name) + axes.ver.scale.rangeBand() / 2; })\n        .interpolate(uv.config.line.interpolation);\n\n  linegroup.path.append('path')\n        .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n        .attr('d', linegroup.func)\n        .style('fill', 'none')\n        .style('stroke', color)\n        .style('stroke-width', self.config.line.strokewidth)\n        .style('stroke-opacity', self.config.line.strokeopacity)\n        .transition()\n          .duration(3 * self.config.effects.duration)\n          .delay(2 * idx * self.config.effects.duration)\n          .style('stroke-opacity', 1)\n          .call(uv.util.endAll, function (d,i){\n            d3.select(this.parentNode.parentNode).selectAll('path').on('mouseover', uv.effects.line.mouseover(self, idx));\n            d3.select(this.parentNode.parentNode).selectAll('path').on('mouseout', uv.effects.line.mouseout(self, idx));\n            d3.select(this.parentNode.parentNode).selectAll('circle').on('mouseover', uv.effects.line.mouseover(self, idx));\n            d3.select(this.parentNode.parentNode).selectAll('circle').on('mouseout', uv.effects.line.mouseout(self, idx));\n          });\n\n  if (self.config.line.showcircles) {\n    linegroup.path.selectAll('circle')\n          .data(self.dataset[idx])\n          .enter().append('circle')\n          .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n          .attr('cx', linegroup.func.x())\n          .attr('cy', linegroup.func.y())\n          .attr('r', self.config.line.circleradius)\n          .style('fill', color)\n          .style('fill-opacity', self.config.line.circleopacity)\n          .style('stroke', '#fff')\n            .append('svg:title')\n            .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n  }\n\n  linegroup.path.selectAll('text')\n        .data(self.dataset[idx])\n        .enter().append('text')\n        .attr('x', function (d) { return axes.hor.scale(d.value); })\n        .attr('y', function(d) { return axes.ver.scale(d.name) + axes.ver.scale.rangeBand()/2; })\n        .attr('dx', 10)\n        .attr('dy', '.35em')\n        .attr('text-anchor', 'start')\n        .style('opacity', 0)\n        .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n        .style('fill', self.config.label.showlabel ? uv.util.getColorBand(self.config, idx) : 'none')\n        .style('font-family', self.config.line.fontfamily)\n        .style('font-size', self.config.line.fontsize)\n        .style('font-weight', self.config.line.fontweight)\n        .text(function(d) { return uv.util.getLabelValue(self, d); })\n        .transition()\n          .duration(3 * self.config.effects.duration)\n          .delay(2 * idx * self.config.effects.duration)\n          .style('opacity', 1);\n\n  return this;\n};\n\nuv.LineGraph.prototype.drawVerticalLines = function (linegroup, idx) {\n  var self = this,\n    axes = self.axes,\n    config = self.config,\n    color = uv.util.getColorBand(self.config, idx);\n\n  self.axes.hor.scale.rangePoints([0, self.width()]);\n\n  linegroup.func = d3.svg.line()\n        .x(function (d) { return axes.hor.scale(d.name) + axes.hor.scale.rangeBand() / 2; })\n        .y(function (d) { return axes.ver.scale(d.value); })\n        .interpolate(uv.config.line.interpolation);\n\n  linegroup.path.append('path')\n        .attr('d', linegroup.func)\n        .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n        .style('fill', 'none')\n        .style('stroke', color)\n        .style('stroke-width', self.config.line.strokewidth)\n        .style('stroke-opacity', self.config.line.strokeopacity)\n        .transition()\n          .duration(self.config.effects.duration)\n          .delay(2 * idx * self.config.effects.duration)\n          .style('stroke-opacity', 1)\n          .call(uv.util.endAll, function (d,i){\n            d3.select(this.parentNode.parentNode).selectAll('path').on('mouseover', uv.effects.line.mouseover(self, idx));\n            d3.select(this.parentNode.parentNode).selectAll('path').on('mouseout', uv.effects.line.mouseout(self, idx));\n            d3.select(this.parentNode.parentNode).selectAll('circle').on('mouseover', uv.effects.line.mouseover(self, idx));\n            d3.select(this.parentNode.parentNode).selectAll('circle').on('mouseout', uv.effects.line.mouseout(self, idx));\n          });\n\n  if (self.config.line.showcircles) {\n    linegroup.path.selectAll('circle')\n          .data(self.dataset[idx])\n          .enter().append('circle')\n          .attr('cx', linegroup.func.x())\n          .attr('cy', linegroup.func.y())\n          .attr('r', self.config.line.circleradius)\n          .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n          .style('fill', color)\n          .style('fill-opacity', self.config.line.circleopacity)\n          .style('stroke', '#fff')\n            .append('svg:title')\n            .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n  }\n\n  linegroup.path.selectAll('text')\n        .data(self.dataset[idx])\n        .enter().append('text')\n        .attr('x', function (d) { return axes.hor.scale(d.name) + axes.hor.scale.rangeBand() / 2; })\n        .attr('y', function (d) { return axes.ver.scale(d.value) - 20; })\n        .attr('dx', 0)\n        .attr('dy', '.71em')\n        .attr('text-anchor', 'middle')\n        .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n        .style('fill', self.config.label.showlabel ? uv.util.getColorBand(self.config, idx) : 'none')\n        .style('font-family', self.config.line.fontfamily)\n        .style('font-size', self.config.line.fontsize)\n        .style('font-weight', self.config.line.fontweight)\n        .style('opacity', 0)\n        .text(function(d) { return uv.util.getLabelValue(self, d); })\n        .transition()\n          .duration(3 * self.config.effects.duration)\n          .delay(2 * idx * self.config.effects.duration)\n          .style('opacity', 1);\n\n  return this;\n};\n\nuv.PercentAreaGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  var stacklayout = d3.layout.stack().offset('zero')(\n    self.categories.map(function (d) {\n      return graphdef.dataset[d].map(function (d) {\n        return {x: d.name, y: +d.value};\n      });\n    })\n  );\n\n  var areagroup, areapath, areafunc,\n    domainData = self.labels,\n    categories = self.categories;\n\n  self.axes[self.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(domainData);\n  self.areagroup = self.chart.selectAll('g.areagroup').data(stacklayout).enter().append('g')\n                .attr('class', function (d,i) {\n                  return uv.util.getClassName(this, 'cge-' + self.categories[i]);\n                });\n\n  self['draw' + self.config.graph.orientation + 'Area']();\n\n  self.finalize();\n};\n\nuv.PercentAreaGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.PercentAreaGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'percent';\n  return this;\n};\n\nuv.PercentAreaGraph.prototype.drawHorizontalArea = function () {\n  var self = this, axes = self.axes,\n    categories = self.categories,\n    config = self.config,\n    sumMap = uv.util.getSumUpArray(self.graphdef);\n\n  axes.ver.scale.rangePoints([0, self.height()]);\n\n  for(var i = 0; i < categories.length; i = i + 1) {\n    uv.effects.area.mouseover(self, i);\n    uv.effects.area.mouseout(self,i);\n  }\n\n  self.areagroup.append('path')\n      .attr('class', function (d, i) {\n        return uv.util.getClassName(this, uv.constants.classes.area + uv.util.formatClassName(categories[i]));\n      })\n      .style('fill', function (d, i) { return uv.util.getColorBand(config, i); })\n      .attr('d', d3.svg.area()\n        .y(function (d) { return axes.ver.scale(d.x) + axes.ver.scale.rangeBand() / 2; })\n        .x0(function (d, i) { return axes.hor.scale(uv.util.getPercentage(d.y0, sumMap[i])); })\n        .x1(function (d, i) { return axes.hor.scale(uv.util.getPercentage(d.y0 + d.y, sumMap[i])); })\n        .interpolate(self.config.area.interpolation)\n    )\n    .on('mouseover', function (d,i) { self.effects[categories[i]].mouseover(); })\n    .on('mouseout', function (d,i) { self.effects[categories[i]].mouseout(); });\n\n  self.areagroup.append('path')\n    .attr('class', function (d, i) {\n      return uv.util.getClassName(this, uv.constants.classes.line + uv.util.formatClassName(categories[i]));\n    })\n    .style('stroke', 'white')\n    .style('fill', 'none')\n    .style('stroke-width', 2)\n    .attr('d', d3.svg.line()\n        .y(function (d) { return axes.ver.scale(d.x) + axes.ver.scale.rangeBand() / 2; })\n        .x(function (d, i) { return axes.hor.scale(uv.util.getPercentage(d.y0 + d.y, sumMap[i])); })\n        .interpolate(self.config.area.interpolation)\n    );\n};\n\nuv.PercentAreaGraph.prototype.drawVerticalArea = function () {\n  var self = this, axes = self.axes,\n    categories = self.categories,\n    config = self.config,\n    sumMap = uv.util.getSumUpArray(self.graphdef);\n\n  axes.hor.scale.rangePoints([0, self.width()]);\n\n  for(var i = 0; i < categories.length; i = i + 1){\n    uv.effects.area.mouseover(self, i);\n    uv.effects.area.mouseout(self,i);\n  }\n\n  self.areagroup.append('path')\n      .attr('class', function (d, i) {\n        return uv.util.getClassName(this, uv.constants.classes.area + uv.util.formatClassName(categories[i]));\n      })\n      .style('fill', function (d, i) { return uv.util.getColorBand(config, i); })\n      .attr('d', d3.svg.area()\n        .x(function (d) { return axes.hor.scale(d.x) + axes.hor.scale.rangeBand() / 2; })\n        .y0(function (d, i) { return axes.ver.scale(uv.util.getPercentage(d.y0, sumMap[i])); })\n        .y1(function (d, i) { return axes.ver.scale(uv.util.getPercentage(d.y0 + d.y, sumMap[i])); })\n        .interpolate(self.config.area.interpolation)\n      )\n    .on('mouseover', function (d,i) {self.effects[categories[i]].mouseover(); })\n    .on('mouseout', function (d,i) { self.effects[categories[i]].mouseout(); });\n\n  self.areagroup.append('path')\n      .attr('class', function (d, i) {\n        return uv.util.getClassName(this, uv.constants.classes.line + uv.util.formatClassName(categories[i]));\n      })\n      .style('stroke', 'white')\n      .style('fill', 'none')\n      .style('stroke-width', 2)\n      .attr('d', d3.svg.line()\n        .x(function (d, i) { return axes.hor.scale(d.x) + axes.hor.scale.rangeBand() / 2; })\n        .y(function (d, i) { return axes.ver.scale(uv.util.getPercentage(d.y0 + d.y, sumMap[i])); })\n        .interpolate(self.config.area.interpolation)\n      );\n};\n\nuv.PercentBarGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.bargroups = [];\n\n  var bargroup, bars, idx, len, color,\n    domainData = self.labels,\n    csum = domainData.map(function (d) {return 0; }),\n    tsum = domainData.map(function (d) {return 0; });\n\n  self.axes[self.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(domainData);\n\n  for (idx = 0, len = self.categories.length; idx < len; idx = idx + 1) {\n    color = uv.util.getColorBand(self.config, idx);\n    bargroup = self.chart.append('g').classed('cg-' + self.categories[idx], true);\n    bars = bargroup.selectAll('g').data(self.graphdef.dataset[self.categories[idx]]).enter().append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true);\n\n    self['draw' + uv.util.getPascalCasedName(self.config.graph.orientation) + 'Bars'](bars, csum, tsum, idx);\n\n    if (self.config.graph.orientation === 'Vertical') {\n      bargroup.attr('transform', 'translate(0,' + 2 * self.height() + ') scale(1,-1)');\n    }\n\n    self.bargroups.push(bargroup);\n  }\n\n  self.finalize();\n};\n\nuv.PercentBarGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.PercentBarGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'percent';\n  self.config.scale.ordinality = 0;\n  return this;\n};\n\nuv.PercentBarGraph.prototype.drawHorizontalBars = function (bars, csum, tsum, idx) {\n  var self = this,\n    axes = this.axes,\n    color = uv.util.getColorBand(this.config, idx),\n    config = this.config,\n    sumMap = uv.util.getSumUpArray(this.graphdef);\n\n  bars.append('rect')\n    .attr('height', axes.ver.scale.rangeBand())\n    .attr('width', 0)\n    .attr('x', function (d, i) { var value = axes.hor.scale(uv.util.getPercentage(csum[i], sumMap[i])); csum[i] += d.value; return value; })\n    .attr('y', function (d) {return axes.ver.scale(d.name); })\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('stroke', 'none')\n    .style('fill', color)\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('width', function (d, i) { return axes.hor.scale(uv.util.getPercentage(d.value, sumMap[i]));})\n      .call(uv.util.endAll, function (d,i){\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseover', uv.effects.bar.mouseover(self, idx, self.config.effects.textcolor));\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseout', uv.effects.bar.mouseout(self, idx, self.config.effects.textcolor));\n      });\n\n\n  bars.append('text')\n    .attr('y', function(d) { return axes.ver.scale(d.name) + axes.ver.scale.rangeBand()/2; })\n    .attr('dx', 0)\n    .attr('dy', '.35em')\n    .attr('text-anchor', 'end')\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('fill', self.config.label.showlabel ? self.config.effects.textcolor : 'none')\n    .style('font-family', this.config.bar.fontfamily)\n    .style('font-size', this.config.bar.fontsize)\n    .style('font-weight', this.config.bar.fontweight)\n    .text(function(d, i) { return ( axes.hor.scale(uv.util.getPercentage(csum[i], sumMap[i])) > 15 ) ? String(Math.round(uv.util.getPercentage(d.value, sumMap[i]))) : null; })\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('x', function (d, i) { tsum[i] += d.value; return axes.hor.scale(uv.util.getPercentage(tsum[i], sumMap[i])) - 5; });\n};\n\nuv.PercentBarGraph.prototype.drawVerticalBars = function (bars, csum, tsum, idx) {\n  var self = this,\n    height = this.height(),\n    axes = this.axes,\n    color = uv.util.getColorBand(this.config, idx),\n    config = this.config,\n    sumMap = uv.util.getSumUpArray(this.graphdef);\n\n  bars.append('rect')\n    .attr('height', 0)\n    .attr('width', axes.hor.scale.rangeBand())\n    .attr('x', function (d) { return axes.hor.scale(d.name); })\n    .attr('y', function (d, i) { var value = axes.ver.scale(uv.util.getPercentage(csum[i], sumMap[i])); csum[i] -= d.value; return value; })\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('stroke', 'none')\n    .style('fill', color)\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('height', function (d, i) { return height - axes.ver.scale(uv.util.getPercentage(d.value, sumMap[i])); })\n      .call(uv.util.endAll, function (d,i){\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseover', uv.effects.bar.mouseover(self, idx, self.config.effects.textcolor));\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseout', uv.effects.bar.mouseout(self, idx, self.config.effects.textcolor));\n      });\n\n  bars.append('text').attr('transform','scale(1,-1)')\n    .attr('x', function(d) { return axes.hor.scale(d.name) + axes.hor.scale.rangeBand()/2; })\n    .attr('y', -height + 5)\n    .attr('dy', '.71em')\n    .attr('text-anchor', 'middle')\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('fill', self.config.label.showlabel ? self.config.effects.textcolor : 'none')\n    .style('font-family', this.config.bar.fontfamily)\n    .style('font-size', this.config.bar.fontsize)\n    .style('font-weight', this.config.bar.fontweight)\n    .text(function(d, i) { return ( height - axes.ver.scale(uv.util.getPercentage(d.value, sumMap[i])) > 15) ? String(Math.round(uv.util.getPercentage(d.value, sumMap[i]))) : null; })\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('y', function (d, i) { tsum[i] += d.value; return -(2*height - axes.ver.scale(uv.util.getPercentage(tsum[i], sumMap[i]))) + 5; });\n};\n\nuv.PieGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.radius = Math.min(self.height(), self.width()) * 2 / 5;\n  self.center = {\n    x : self.width() / 2,\n    y : self.height() / 2\n  };\n\n  self.category = graphdef.categories[0];\n\n  var data = uv.util.getCategoryData(self.graphdef, [self.category]),\n    arcfunc = d3.svg.arc().innerRadius(0).outerRadius(self.radius),\n    layout = d3.layout.pie();\n\n  self.chart.data(data);\n  self.arcs = self.chart.selectAll('g.arc')\n          .data(layout).enter()\n          .append('g').classed(uv.constants.classes.arc + uv.util.formatClassName(self.category), true)\n          .attr('class', function (d, i){\n            return uv.util.getClassName(this, 'cge-' + self.labels[i]);\n          })\n          .attr('transform', 'translate(' + self.center.x + ',' + self.center.y + ')');\n\n  self.arcs.append('path')\n      .attr('d', arcfunc)\n      .style('fill', function (d, i) { return uv.util.getColorBand(self.config, i); })\n      .style('stroke', self.config.pie.strokecolor)\n      .style('stroke-width', self.config.pie.strokewidth)\n    .on('mouseover', uv.effects.pie.mouseover(self, self.center, arcfunc, self.config))\n    .on('mouseout', uv.effects.pie.mouseout(self, self.center, self.config));\n\n  self.arcs.append('text')\n      .attr('transform', function (d) { return 'translate(' + arcfunc.centroid(d) + ')'; })\n      .attr('dy', '.35em')\n      .attr('text-anchor', 'middle')\n      .style('fill', self.config.label.showlabel ? self.config.pie.fontfill : 'none')\n      .style('font-family', self.config.pie.fontfamily)\n      .style('font-size', self.config.pie.fontsize)\n      .style('font-weight', self.config.pie.fontweight)\n      .style('font-variant', self.config.pie.fontvariant)\n      .text(function (d) { return uv.util.getLabelValue(self, d); });\n\n  self.arcs.append('svg:title')\n    .text(function (d, i) { return uv.util.getTooltipText(self, self.category, self.labels[i], d);});\n\n  if (typeof self.config.graph.clickCallback === \"function\") {\n    self.arcs.on('click', function (d) {\n      self.config.graph.clickCallback.apply(null, [d]);\n    });\n  }\n};\n\nuv.PieGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.PieGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'normal';\n  self.config.legend.legendtype = 'labels';\n  return this;\n};\n\nuv.PolarAreaGraph = function (graphdef, config) {\n  var self = this;\n\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.maxRadius = Math.min(self.height(), self.width()) * 2/5;\n  self.center = {\n    x : self.width() / 2,\n    y : self.height() / 2\n  };\n\n  self.category = self.categories[0];\n\n  var data = uv.util.getCategoryData(self.graphdef, [self.category]),\n    dataMap = data[0].map(function(d,i){ return d; }),\n    layout = d3.layout.pie().value(function(d){return self.max()/ data[0].length; }),\n    tickRadius = [],\n    arcfuncs = d3.svg.arc().innerRadius(0)\n            .outerRadius(function(d,i){return ((dataMap[i] * self.maxRadius) / self.max());});\n\n  for (var i=1; i<=self.config.axis.ticks; i++) {\n    tickRadius[i] = (self.maxRadius/self.config.axis.ticks) * i;\n  }\n\n  self.chart.data(data);\n  self.arcs = self.chart.selectAll('g.arc')\n                  .data(layout).enter()\n                  .append('g').classed(uv.constants.classes.arc + uv.util.formatClassName(self.category), true)\n                  .attr('transform', 'translate(' + self.center.x + ',' + self.center.y + ')');\n\n  self.arcs.append('path')\n    .attr('d', arcfuncs)\n    .style('fill', function (d, i) { return uv.util.getColorBand(self.config, i);})\n    .style('stroke', self.config.pie.strokecolor)\n    .style('stroke-width', self.config.pie.strokewidth);\n\n  /*self.arcs.append('text')\n      .attr('transform', function (d, i) { return 'translate(' + arcfuncs.centroid(d) + ')'; })\n      .attr('dy', '.35em')\n      .attr('text-anchor', 'middle')\n      .style('fill', self.config.pie.fontfill)\n      .style('font-family', self.config.pie.fontfamily)\n      .style('font-size', self.config.pie.fontsize)\n      .style('font-weight', self.config.pie.fontweight)\n      .style('font-variant', self.config.pie.fontvariant)\n      .text(function (d) { return uv.util.getLabelValue(self, d); }); */\n\n  self.arcs.append('svg:title')\n    .text(function (d, i) { return uv.util.getTooltipText(self, self.category, self.labels[i], d);});\n\n  self.chart.selectAll('.' + uv.constants.classes.circleticks)\n    .data(tickRadius)\n    .enter().append('svg:g').classed(uv.constants.classes.circleticks, true)\n    .append(\"svg:circle\")\n    .attr(\"r\", function (d, i) { return d; })\n    .style(\"stroke\", self.config.axis.strokecolor)\n    .style(\"opacity\", self.config.axis.opacity)\n    .style(\"fill\", \"none\")\n    .attr('transform', 'translate(' + self.center.x + ',' + self.center.y + ')');\n\n  if (typeof self.config.graph.clickCallback === \"function\") {\n    self.arcs.on('click', function (d) {\n      self.config.graph.clickCallback.apply(null, [d]);\n    });\n  }\n};\n\nuv.PolarAreaGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.PolarAreaGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'normal';\n  self.config.legend.legendtype = 'labels';\n  return this;\n};\n\nuv.StackedAreaGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  var stacklayout = d3.layout.stack().offset(self.config.area.offset)(self.categories.map(function (d) {\n      return graphdef.dataset[d].map(function (d) { return {x: d.name, y: +d.value}; });\n  }));\n\n  self.axes[self.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(self.labels.map(function (d) { return d; }));\n  self.areagroup = self.chart.append('g').selectAll('g')\n                      .data(stacklayout).enter().append('g').attr('class', function (d, i) {\n                        return uv.util.getClassName(this, 'cge-' + self.categories[i]);\n                      });\n\n  self['draw' + self.config.graph.orientation + 'Area']();\n\n  self.finalize();\n};\n\nuv.StackedAreaGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.StackedAreaGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'stepup';\n  return this;\n};\n\nuv.StackedAreaGraph.prototype.drawHorizontalArea = function () {\n  var self = this, axes = self.axes,\n    categories = self.categories,\n    config = self.config;\n\n  axes.ver.scale.rangePoints([0, self.height()]);\n\n  for(var i = 0; i < categories.length; i = i + 1){\n    uv.effects.area.mouseover(self, i);\n    uv.effects.area.mouseout(self, i);\n  }\n\n  self.areagroup.append('path')\n      .attr('class', function (d, i) {\n        return uv.util.getClassName(this, uv.constants.classes.area + categories[i]);\n      })\n      .style('fill', function (d, i) { return uv.util.getColorBand(config, i); })\n      .attr('d', d3.svg.area()\n        .y(function (d) { return axes.ver.scale(d.x) + axes.ver.scale.rangeBand() / 2; })\n        .x0(function (d) { return axes.hor.scale(d.y0); })\n        .x1(function (d) { return axes.hor.scale(d.y0 + d.y); })\n        .interpolate(self.config.area.interpolation)\n      )\n    .on('mouseover', function (d,i){ self.effects[categories[i]].mouseover(); })\n    .on('mouseout',  function (d,i) { self.effects[categories[i]].mouseout(); });\n\n  self.areagroup.append('path')\n    .attr('class', function (d, i) {\n      return uv.util.getClassName(this, uv.constants.classes.line + categories[i]);\n    })\n    .style('stroke', 'white')\n    .style('fill', 'none')\n    .style('stroke-width', 2)\n    .attr('d', d3.svg.line()\n      .y(function (d) { return axes.ver.scale(d.x) + axes.ver.scale.rangeBand() / 2; })\n      .x(function (d) { return axes.hor.scale(d.y0 + d.y); })\n      .interpolate(self.config.area.interpolation)\n    );\n\n  return self;\n};\n\nuv.StackedAreaGraph.prototype.drawVerticalArea = function () {\n  var self = this, axes = self.axes,\n    categories = self.categories,\n    config = self.config;\n\n  axes.hor.scale.rangePoints([0, self.width()]);\n\n  for(var i = 0; i < categories.length; i = i + 1){\n    uv.effects.area.mouseover(self, i);\n    uv.effects.area.mouseout(self, i);\n  }\n\n  self.areagroup.append('path')\n      .attr('class', function (d, i) {\n        return uv.util.getClassName(this, uv.constants.classes.area + categories[i]);\n      })\n      .style('fill', function (d, i) { return uv.util.getColorBand(config, i); })\n      .attr('d', d3.svg.area()\n        .x(function (d) { return axes.hor.scale(d.x) + axes.hor.scale.rangeBand() / 2; })\n        .y0(function (d) { return axes.ver.scale(d.y0); })\n        .y1(function (d) { return axes.ver.scale(d.y0 + d.y); })\n        .interpolate(self.config.area.interpolation)\n      )\n    .on('mouseover', function (d,i){ self.effects[categories[i]].mouseover(); })\n    .on('mouseout',  function (d,i) { self.effects[categories[i]].mouseout(); });\n\n\n  self.areagroup.append('path')\n      .attr('class', function (d, i) {\n        return uv.util.getClassName(this, uv.constants.classes.line + categories[i]);\n      })\n      .style('stroke', 'white')\n      .style('fill', 'none')\n      .style('stroke-width', 2)\n      .attr('d', d3.svg.line()\n        .x(function (d) { return axes.hor.scale(d.x) + axes.hor.scale.rangeBand() / 2; })\n        .y(function (d) { return axes.ver.scale(d.y0 + d.y); })\n        .interpolate(self.config.area.interpolation)\n      );\n\n  return self;\n};\n\nuv.StackedBarGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.bargroups = {};\n\n  var bargroup, bars, idx, len, color,\n    domainData = self.labels,\n    csum = domainData.map(function (d) {return 0; }),\n    tsum = domainData.map(function (d) {return 0; });\n\n  self.axes[self.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(domainData);\n\n  for (idx = 0, len = self.categories.length; idx < len; idx = idx + 1) {\n    self.bargroups[self.categories[idx]] = self.chart.append('g').classed('cg-' + uv.util.formatClassName(self.categories[idx]), true);\n    self['draw' + self.config.graph.orientation + 'Bars'](idx, csum, tsum);\n  }\n\n  self.finalize();\n};\n\nuv.StackedBarGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.StackedBarGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'stepup';\n  return this;\n};\n\nuv.StackedBarGraph.prototype.drawHorizontalBars = function (idx, csum, tsum) {\n  var self = this,\n    axes = this.axes,\n    color = uv.util.getColorBand(this.config, idx),\n    config = this.config,\n    bargroup = this.bargroups[this.categories[idx]];\n\n  var bars = bargroup.selectAll('g').data(this.graphdef.dataset[self.categories[idx]])\n        .enter().append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true);\n\n  bars.append('rect')\n    .attr('height', axes.ver.scale.rangeBand())\n    .attr('width', 0)\n    .attr('x', function (d, i) { var value = axes.hor.scale(csum[i]); csum[i] += d.value; return value; })\n    .attr('y', function (d) {return axes.ver.scale(d.name); })\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('stroke', 'none')\n    .style('fill', color)\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('width', function (d,i) { return axes.hor.scale(csum[i]) - axes.hor.scale(csum[i]-d.value); })\n      .each(\"end\", function (d,i){\n        d3.select(this).on('mouseover', uv.effects.bar.mouseover(self, idx, self.config.effects.textcolor));\n        d3.select(this).on('mouseout', uv.effects.bar.mouseout(self, idx, self.config.effects.textcolor));\n        if(typeof self.config.graph.clickCallback === \"function\") {\n          d3.select(this).on('click', function(_d){\n              self.config.graph.clickCallback.apply(null, [_d]);\n          });\n        }\n      });\n\n\n  bars.append('text')\n    .attr('y', function(d) { return axes.ver.scale(d.name) + axes.ver.scale.rangeBand()/2; })\n    .attr('dx', 0)\n    .attr('dy', '.35em')\n    .attr('text-anchor', 'end')\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('fill', self.config.label.showlabel ? self.config.effects.textcolor : 'none')\n    .style('font-family', config.bar.fontfamily)\n    .style('font-size', config.bar.fontsize)\n    .style('font-weight', config.bar.fontweight)\n    .style('opacity', 0)\n    .text(function(d) { return ( axes.hor.scale(d.value) > 15 ) ? uv.util.getLabelValue(self, d) : null; })\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .style('opacity', 1)\n      .attr('x', function (d, i) { tsum[i] += d.value; return axes.hor.scale(tsum[i]) - 5; });\n\n  bars.append('svg:title')\n    .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n};\n\nuv.StackedBarGraph.prototype.drawVerticalBars = function (idx, csum, tsum) {\n  var self = this,\n    height = this.height(),\n    axes = this.axes,\n    color = uv.util.getColorBand(this.config, idx),\n    config = this.config,\n    bargroup = this.bargroups[self.categories[idx]];\n\n  var bars = bargroup.selectAll('g').data(this.graphdef.dataset[self.categories[idx]])\n        .enter().append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true);\n\n  bars.append('rect')\n    .attr('height', 0)\n    .attr('width', axes.hor.scale.rangeBand())\n    .attr('x', function (d) { return axes.hor.scale(d.name); })\n    .attr('y', function (d, i) { var value = axes.ver.scale(csum[i]); csum[i] -= d.value; return value; })\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('stroke', 'none')\n    .style('fill', color)\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('height', function (d,i) { return -(axes.ver.scale(-csum[i]) - axes.ver.scale(-csum[i]-d.value)); })\n      .each(\"end\", function (d,i){\n        d3.select(this).on('mouseover', uv.effects.bar.mouseover(self, idx, self.config.effects.textcolor));\n        d3.select(this).on('mouseout', uv.effects.bar.mouseout(self, idx, self.config.effects.textcolor));\n        if(typeof self.config.graph.clickCallback === \"function\") {\n          d3.select(this).on('click', function(_d){\n            self.config.graph.clickCallback.apply(null, [_d]);\n          });\n        }\n      });\n\n\n  bars.append('text').attr('transform','scale(1,-1)')\n    .attr('x', function(d) { return axes.hor.scale(d.name) + axes.hor.scale.rangeBand()/2; })\n    .attr('y', -height + 5)\n    .attr('dy', '.71em')\n    .attr('text-anchor', 'middle')\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('fill', self.config.label.showlabel ? self.config.effects.textcolor : 'none')\n    .style('font-family', config.bar.fontfamily)\n    .style('font-size', config.bar.fontsize)\n    .style('font-weight', config.bar.fontweight)\n    .style('opacity', 0)\n    .text(function(d) { return ( height - axes.ver.scale(d.value) > 15) ? uv.util.getLabelValue(self, d) : null; })\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .style('opacity', 1)\n      .attr('y', function (d, i) { tsum[i] += d.value; return -(2*height - axes.ver.scale(tsum[i])) + 5; });\n\n  bars.append('svg:title')\n    .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n\n  bargroup.attr('transform', 'translate(0,' + 2 * this.height() + ') scale(1,-1)');\n};\n\nuv.StepUpBarGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  this.bargroups = {};\n\n  var idx, length = self.categories.length,\n    csum = self.labels.map(function (d) {return 0; }),\n    tsum = self.labels.map(function (d) {return 0; });\n\n  self.axes[this.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(this.labels);\n\n  for (idx = 0; idx < length; idx = idx + 1) {\n    self.bargroups[self.categories[idx]] = this.chart.append('g').classed('cg-' + uv.util.formatClassName(self.categories[idx]), true);\n    self['draw' + self.config.graph.orientation + 'Bars'](idx, csum, tsum);\n  }\n\n  self.finalize();\n};\n\nuv.StepUpBarGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.StepUpBarGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'stepup';\n  return this;\n};\n\nuv.StepUpBarGraph.prototype.drawHorizontalBars = function (idx, csum, tsum) {\n  var self = this, len = self.categories.length,\n    color = uv.util.getColorBand(self.config, idx),\n    bargroup = self.bargroups[self.categories[idx]];\n\n  var bars = bargroup.selectAll('g').data(self.graphdef.dataset[self.categories[idx]]).enter().append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true);\n  bars.append('rect')\n    .attr('height', self.axes.ver.scale.rangeBand() / len)\n    .attr('width', 0)\n    .attr('transform',\n      function (d) {\n      return (d.value < 0) ? 'scale(-1,1)': 'scale(1,1)';\n    })\n    .attr('x', function (d, i) {\n      if (d.resetSum === true) csum[i] = 0;\n      var value = self.axes.hor.scale(csum[i]);\n      csum[i] += d.value;\n      return d.value < 0 ? -value: value;\n    })\n    .attr('y', function (d) {return self.axes.ver.scale(d.name); })\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('stroke', 'none')\n    .style('fill', color)\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('width', function (d, i) { return Math.abs(self.axes.hor.scale(csum[i]) - self.axes.hor.scale(csum[i]-d.value)); })\n      .call(uv.util.endAll, function (d,i){\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseover', uv.effects.bar.mouseover(self, idx));\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseout', uv.effects.bar.mouseout(self, idx));\n      });\n\n  bars.append('text')\n    .attr('y', function(d) { return self.axes.ver.scale(d.name) + (self.axes.ver.scale.rangeBand()/len)/2; })\n    .attr('dx', function (d) { return (d.value < 0)? -16: 4; })\n    .attr('dy', '.35em')\n    .attr('text-anchor', 'start')\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('fill', self.config.label.showlabel ? uv.util.getColorBand(self.config, idx) : 'none')\n    .style('opacity', 0)\n    .style('font-family', self.config.bar.fontfamily)\n    .style('font-size', self.config.bar.fontsize)\n    .style('font-weight', self.config.bar.fontweight)\n    .text(function(d) { return uv.util.getLabelValue(self, d); })\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .style('opacity', 1)\n      .attr('x', function (d, i) {\n        if (d.resetSum === true) tsum[i] = 0;\n        tsum[i] += d.value;\n        return self.axes.hor.scale(tsum[i]);\n      });\n\n  bars.append('svg:title')\n    .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n\n  bargroup.attr('transform', 'translate(0,' + idx * self.axes.ver.scale.rangeBand() / len + ')');\n};\n\nuv.StepUpBarGraph.prototype.drawVerticalBars = function (idx, csum, tsum) {\n  var self = this, len = self.categories.length,\n    color = uv.util.getColorBand(self.config, idx),\n    bargroup = self.bargroups[self.categories[idx]],\n    scaledSum = 0;\n\n  var bars = bargroup.selectAll('g').data(self.graphdef.dataset[self.categories[idx]]).enter().append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true);\n\n  bars.append('rect')\n    .attr('height', 0)\n    .attr('width', self.axes.hor.scale.rangeBand() / len)\n    .attr('transform',\n      function (d) {\n      return (d.value < 0) ? 'scale(1,-1)': 'scale(1,1)';\n    })\n    .attr('x', function (d) { return self.axes.hor.scale(d.name); })\n    .attr('y', function (d, i) {\n      if (d.resetSum === true) csum[i] = 0;\n      var value = (2*self.height() - self.axes.ver.scale(csum[i]));\n      csum[i] += d.value;\n      return (d.value < 0)? -value: value;\n    })\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('stroke', 'none')\n    .style('fill', color)\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('height', function (d, i) {\n        return Math.abs(self.axes.ver.scale(-csum[i]) - self.axes.ver.scale(-csum[i]-d.value));\n      })\n      .call(uv.util.endAll, function (d,i){\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseover', uv.effects.bar.mouseover(self, idx));\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseout', uv.effects.bar.mouseout(self, idx));\n      });\n\n  bars.append('text').attr('transform','scale(1,-1)')\n    .attr('x', function(d) { return self.axes.hor.scale(d.name) + (self.axes.hor.scale.rangeBand()/len)/2; })\n    .attr('y', -self.height() - 10)\n    .attr('dy', function (d) { return (d.value < 0)? '2.3em': '.71em'})\n    .attr('text-anchor', 'middle')\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('fill', self.config.label.showlabel ? uv.util.getColorBand(self.config, idx) : 'none')\n    .style('font-family', self.config.bar.fontfamily)\n    .style('font-size', self.config.bar.fontsize)\n    .style('font-weight', self.config.bar.fontweight)\n    .style('opacity', 0)\n    .text(function(d) { return uv.util.getLabelValue(self, d); })\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .style('opacity', 1)\n      .attr('y', function (d, i) {\n        if (d.resetSum === true) tsum[i] = 0;\n        tsum[i] += d.value;\n        return -(2*self.height() - self.axes.ver.scale(tsum[i])) - 10;\n      });\n\n  bars.append('svg:title')\n    .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n\n  bargroup.attr('transform', 'translate(' + idx * self.axes.hor.scale.rangeBand() / len + ',' + 2 * self.height() + ') scale(1,-1)');\n};\n\nuv.Table = function () {\n  this.caption = undefined;\n  this.position = undefined;\n  this.graphdef = undefined;\n\n  this.table = undefined;\n  this.header = undefined;\n  this.body = undefined;\n  this.bodyrows = {};\n};\n\nuv.Table.prototype.init = function (graphdef, config) {\n  this.graphdef = graphdef;\n  this.config = uv.util.extend({}, config);\n  this.position = this.config.meta.pos || 'body';\n\n  this.table = d3.select(this.position).append('table').classed(this.config.table.tableclass, true);\n  this.header = this.table.append('thead').classed(this.config.table.headerclass, true);\n  this.body = this.table.append('tbody').classed(this.config.table.bodyclass, true);\n  this.footer = this.table.append('tfoot').classed(this.config.table.footerclass, true);\n};\n\nuv.Table.prototype.finalize = function () {\n  //console.log(this);\n};\n\nuv.TableGraph = function (graphdef, config) {\n  uv.Table.apply(this, [graphdef]);\n  this.init(graphdef, config);\n\n  if (this.config.graph.orientation === 'Horizontal') {\n    this.setHorTable();\n  } else {\n    this.setVerTable();\n  }\n\n  this.finalize();\n};\n\nuv.TableGraph.prototype = uv.util.inherits(uv.Table);\n\nuv.TableGraph.prototype.setHorTable = function () {\n  var categories = this.graphdef.categories, tableData = uv.util.getTabularArray(this.graphdef);\n\n  categories.unshift('');\n  this.header.append('tr').selectAll('td').data(categories).enter().append('td').text(function (d) { return d; });\n  categories.shift();\n\n  this.bodyrows = this.body.selectAll('tr').data(tableData)\n          .enter().append('tr');\n\n  this.bodyrows.selectAll('td').data(function (d, i) { return tableData[i]; })\n          .enter().append('td')\n          .attr('class', function (d, i) {\n            var classNameString = (i === 0) ? 'chart3rtablelabel' : 'chart3rtabledata';\n            return d3.select(this).attr('class') + classNameString;\n          })\n          .text(function (d) {return d; });\n};\n\nuv.TableGraph.prototype.setVerTable = function () {\n  var labels = uv.util.getLabelArray(this.graphdef), dataset = this.graphdef.dataset;\n\n  labels.unshift('');\n  this.header.append('tr').selectAll('td').data(labels).enter().append('td').text(function (d) { return d; });\n  labels.shift();\n\n  this.bodyrows = this.body.selectAll('tr').data(this.graphdef.categories)\n          .enter().append('tr');\n\n  this.bodyrows.selectAll('td')\n    .data(function (d) {\n      var arr = [], i, len;\n      arr.push(d);\n      for (i = 0, len = dataset[d].length; i < len; i = i + 1) { arr.push(dataset[d][i].value); }\n      return arr;\n    }).enter().append('td')\n      .attr('class', function (d, i) {\n        var classNameString = (i === 0) ? 'chart3rtablelabel' : 'chart3rtabledata';\n        return d3.select(this).attr('class') + classNameString;\n      })\n      .text(function (d) {return d; });\n};\n\n/**\n* A waterfall chart capable of being rendered in horizontal and vertical manner\n* @param {Object} graphdef Definition of the graph being rendered\n* @param {Object} config   Configuration of the graph being rendered\n*/\nuv.WaterfallGraph = function (graphdef, config) {\n  var self = this;\n  uv.Graph.call(self, graphdef, config).setDefaults().init();\n\n  self.bargroups = {};\n\n  self.axes[self.config.graph.orientation === 'Horizontal' ? 'ver' : 'hor'].scale.domain(self.labels);\n\n  var idx, length = self.categories.length, category;\n\n  category = self.categories[0];\n  self.bargroups[category] = self.chart.append('g').classed('cg-' + uv.util.formatClassName(category), true);\n  self['draw' + self.config.graph.orientation + 'Bars'](0);\n\n  self.finalize();\n};\n\nuv.WaterfallGraph.prototype = uv.util.inherits(uv.Graph);\n\nuv.WaterfallGraph.prototype.setDefaults = function () {\n  var self = this;\n  self.graphdef.stepup = 'waterfall';\n  self.config.legend.showlegends = false;\n  return this;\n};\n\nuv.WaterfallGraph.prototype.drawHorizontalBars = function (idx) {\n  var self = this, len = self.categories.length,\n    color = uv.util.getColorBand(self.config, idx),\n    bargroup = self.bargroups[self.categories[idx]];\n  var  csum = 0, tsum =0;\n\n  var bars = bargroup.selectAll('g').data(self.graphdef.dataset[self.categories[idx]]).enter().append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true);\n  bars.append('rect')\n    .attr('height', (self.axes.ver.scale.rangeBand() / len)-2)\n    .attr('width', 0)\n    .attr('x', function (d, i) {\n      var value = (d.value < 0) ? csum + d.value : csum;\n      csum += d.value;\n      return self.axes.hor.scale(value); })\n    .attr('y', function (d) {return self.axes.ver.scale(d.name); })\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('stroke', 'none')\n    .style('fill', color)\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('width', function (d) { return  self.axes.hor.scale(Math.abs(d.value)); })\n      .call(uv.util.endAll, function (d,i){\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseover', uv.effects.bar.mouseover(self, idx));\n        d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseout', uv.effects.bar.mouseout(self, idx));\n      });\n\n  bars.append('text')\n    .attr('y', function(d) { return self.axes.ver.scale(d.name) + (self.axes.ver.scale.rangeBand()/len)/2; })\n    .attr('dx', 4)\n    .attr('dy', '.35em')\n    .attr('text-anchor', 'start')\n    .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n    .style('fill', self.config.label.showlabel ? uv.util.getColorBand(self.config, idx) : 'none')\n    .style('font-family', self.config.bar.fontfamily)\n    .style('font-size', self.config.bar.fontsize)\n    .style('font-weight', self.config.bar.fontweight)\n    .text(function(d) { return uv.util.getLabelValue(self, d); })\n    .transition()\n      .duration(self.config.effects.duration)\n      .delay(idx * self.config.effects.duration)\n      .attr('x', function (d, i) {\n        var value = d.value < 0 ? tsum : tsum + d.value;\n        tsum += d.value;\n        return self.axes.hor.scale(value);\n      });\n\n  bars.append('svg:title')\n    .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n\n  bargroup.attr('transform', 'translate(0,' + idx * self.axes.ver.scale.rangeBand() / len + ')');\n};\n\nuv.WaterfallGraph.prototype.drawVerticalBars = function (idx) {\n  var self = this,\n    color = uv.util.getColorBand(this.config, idx),\n    len = self.categories.length;\n  var csum =0, tsum = 0;\n\n  var bars = self.bargroups[self.categories[idx]].selectAll('g').data(self.graphdef.dataset[self.categories[idx]]).enter()\n      .append('g').classed('cge-' + uv.util.formatClassName(self.categories[idx]), true);\n\n  bars.append('rect')\n      .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n      .attr('height', 0)\n      .attr('width', 0)\n      .attr('x', function (d) {return self.axes.hor.scale(d.name); })\n      .attr('y', function(d) {\n        var value = (d.value < 0) ? csum + d.value : csum;\n        csum += d.value;\n        return self.height() - self.axes.ver.scale(value);\n      })\n      .style('stroke', self.config.bar.strokecolor).style('fill', color)\n      .transition()\n        .duration(self.config.effects.duration)\n        .delay(idx * self.config.effects.duration)\n        .attr('height', function (d) {  return self.height() - self.axes.ver.scale(Math.abs(d.value)); })\n        .attr('width', (self.axes.hor.scale.rangeBand() / len)-2)\n        .call(uv.util.endAll, function (d,i){\n          d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseover', uv.effects.bar.mouseover(self, idx));\n          d3.select(this.parentNode.parentNode).selectAll('rect').on('mouseout', uv.effects.bar.mouseout(self, idx));\n        });\n\n\n  bars.append('text').attr('transform','scale(1,-1)')\n      .attr('x', function(d) { return self.axes.hor.scale(d.name) + (self.axes.hor.scale.rangeBand()/len)/2; })\n      .attr('y', -10)\n      .attr('dx', 0)\n      .attr('dy', '.35em')\n      .attr('text-anchor', 'middle')\n      .classed('cr-' + uv.util.formatClassName(self.categories[idx]), true)\n      .style('fill', self.config.label.showlabel ? uv.util.getColorBand(self.config, idx) : 'none')\n      .style('font-family', self.config.bar.fontfamily)\n      .style('font-size', self.config.bar.fontsize)\n      .style('font-weight', self.config.bar.fontweight)\n      .text(function(d) { return uv.util.getLabelValue(self, d); })\n      .transition()\n        .duration(self.config.effects.duration)\n        .delay(idx * self.config.effects.duration)\n        .attr('y', function (d) {\n          tsum += d.value;\n          var value = d.value < 0 ? tsum - d.value : tsum;\n          return -(self.height() - self.axes.ver.scale(value)) - 10; });\n\n  bars.append('svg:title')\n    .text( function (d, i) { return uv.util.getTooltipText(self, self.categories[idx], self.labels[i], d);});\n\n  self.bargroups[self.categories[idx]].attr('transform', 'translate(' + idx * self.axes.hor.scale.rangeBand() / len + ',' + self.height() + ') scale(1,-1)');\n};\n\n  if (!noGlobal) {\n    window.uv = {\n      chart: uv.chart\n    };\n  }\n\n  return {\n    chart: uv.chart\n  };\n}));","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/js/dependencies/uvcharts.js\");\n",""],"names":[],"sourceRoot":""}